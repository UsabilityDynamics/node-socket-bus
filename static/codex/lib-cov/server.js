/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][13] = 0;
  _$jscoverage['server.js'][16] = 0;
  _$jscoverage['server.js'][17] = 0;
  _$jscoverage['server.js'][21] = 0;
  _$jscoverage['server.js'][22] = 0;
  _$jscoverage['server.js'][25] = 0;
  _$jscoverage['server.js'][41] = 0;
  _$jscoverage['server.js'][70] = 0;
  _$jscoverage['server.js'][71] = 0;
  _$jscoverage['server.js'][72] = 0;
  _$jscoverage['server.js'][73] = 0;
  _$jscoverage['server.js'][76] = 0;
  _$jscoverage['server.js'][84] = 0;
  _$jscoverage['server.js'][97] = 0;
  _$jscoverage['server.js'][98] = 0;
  _$jscoverage['server.js'][100] = 0;
  _$jscoverage['server.js'][102] = 0;
  _$jscoverage['server.js'][103] = 0;
  _$jscoverage['server.js'][106] = 0;
  _$jscoverage['server.js'][107] = 0;
  _$jscoverage['server.js'][110] = 0;
  _$jscoverage['server.js'][119] = 0;
  _$jscoverage['server.js'][122] = 0;
  _$jscoverage['server.js'][125] = 0;
  _$jscoverage['server.js'][128] = 0;
  _$jscoverage['server.js'][131] = 0;
  _$jscoverage['server.js'][140] = 0;
  _$jscoverage['server.js'][143] = 0;
  _$jscoverage['server.js'][146] = 0;
  _$jscoverage['server.js'][147] = 0;
  _$jscoverage['server.js'][150] = 0;
  _$jscoverage['server.js'][151] = 0;
  _$jscoverage['server.js'][156] = 0;
  _$jscoverage['server.js'][159] = 0;
  _$jscoverage['server.js'][168] = 0;
  _$jscoverage['server.js'][171] = 0;
  _$jscoverage['server.js'][177] = 0;
  _$jscoverage['server.js'][180] = 0;
  _$jscoverage['server.js'][189] = 0;
  _$jscoverage['server.js'][192] = 0;
  _$jscoverage['server.js'][195] = 0;
  _$jscoverage['server.js'][214] = 0;
  _$jscoverage['server.js'][217] = 0;
}
_$jscoverage['server.js'][13]++;
function Server(settings) {
  _$jscoverage['server.js'][16]++;
  if (this.constructor.name != "Server") {
    _$jscoverage['server.js'][17]++;
    return new Server(settings);
  }
  _$jscoverage['server.js'][21]++;
  require("object-settings").mixin(this);
  _$jscoverage['server.js'][22]++;
  require("object-emitter").mixin(this);
  _$jscoverage['server.js'][25]++;
  this.set({settings: Server.utility.defaults(settings, {host: "localhost", port: 80123, path: "/", origin: "", passphrase: null, pfx: null, key: null, cert: null, ca: null}), identity: String(process.pid)});
  _$jscoverage['server.js'][41]++;
  Object.defineProperties(this, {Session: {value: require("./session"), enumerable: false, configurable: false, writable: true}, Server: {value: require("ws").createServer({host: this.get("settings.host"), port: this.get("settings.port"), path: this.get("settings.path")}), enumerable: false, writable: true}, _events: {configurable: true, enumerable: false, writable: true}, event: {configurable: true, enumerable: true, writable: true}});
  _$jscoverage['server.js'][70]++;
  this.Server.on("listening", this.listening.bind(this));
  _$jscoverage['server.js'][71]++;
  this.Server.on("connection", this.connection.bind(this));
  _$jscoverage['server.js'][72]++;
  this.Server.on("headers", this.headers.bind(this));
  _$jscoverage['server.js'][73]++;
  this.Server.on("error", this.error.bind(this));
  _$jscoverage['server.js'][76]++;
  return this;
}
_$jscoverage['server.js'][84]++;
Object.defineProperties(Server.prototype, {configure: {value: (function configure(env, fn) {
  _$jscoverage['server.js'][97]++;
  var envs = "all";
  _$jscoverage['server.js'][98]++;
  var args = [].slice.call(arguments);
  _$jscoverage['server.js'][100]++;
  fn = args.pop();
  _$jscoverage['server.js'][102]++;
  if (args.length) {
    _$jscoverage['server.js'][103]++;
    envs = args;
  }
  _$jscoverage['server.js'][106]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['server.js'][107]++;
    this.on("listening", fn.bind(this, this));
  }
  _$jscoverage['server.js'][110]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, connection: {value: (function connection(client) {
  _$jscoverage['server.js'][119]++;
  Server.debug("this.connection", typeof client);
  _$jscoverage['server.js'][122]++;
  client.session = require("./session").create(client);
  _$jscoverage['server.js'][125]++;
  this.emit("session", null, client.session, client, this.Server);
  _$jscoverage['server.js'][128]++;
  this.emit("connection", null, client, this.Server);
  _$jscoverage['server.js'][131]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, error: {value: (function error(reason, errorCode) {
  _$jscoverage['server.js'][140]++;
  Server.debug("this.eror", error);
  _$jscoverage['server.js'][143]++;
  switch (error.code) {
  case "EACCES":
    _$jscoverage['server.js'][146]++;
    this.emit("error.unable_to_bind", new Error("Server can not bind."), this.Server);
    _$jscoverage['server.js'][147]++;
    break;
  case "EADDRINUSE":
    _$jscoverage['server.js'][150]++;
    this.emit("error.address_in_use", new Error("Server port already used."), this.Server);
    _$jscoverage['server.js'][151]++;
    break;
  }
  _$jscoverage['server.js'][156]++;
  this.emit("error", error, this.Server);
  _$jscoverage['server.js'][159]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, listening: {value: (function listening() {
  _$jscoverage['server.js'][168]++;
  Server.debug("bound to %s:%s.", this.Server._server.address().address, this.Server._server.address().port);
  _$jscoverage['server.js'][171]++;
  this.set("settings", {host: this.Server._server.address().address, port: this.Server._server.address().port});
  _$jscoverage['server.js'][177]++;
  this.emit("listening", null, this.Server._server.address(), this.Server);
  _$jscoverage['server.js'][180]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, headers: {value: (function headers(headers) {
  _$jscoverage['server.js'][189]++;
  Server.debug("this.headers", headers);
  _$jscoverage['server.js'][192]++;
  this.emit("headers", null, headers, this.Server);
  _$jscoverage['server.js'][195]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['server.js'][214]++;
Object.defineProperties(module.exports = Server, {create: {value: (function create(settings) {
  _$jscoverage['server.js'][217]++;
  return new Server(settings);
}), enumerable: true, configurable: true, writable: true}, debug: {value: require("debug")("wsmq:server"), enumerable: false, configurable: true, writable: true}, utility: {value: {defaults: require("abstract").utility.defaults, extend: require("abstract").utility.extend}, configurable: true, writable: true}});
_$jscoverage['server.js'].source = ["/**"," * WebSocket Server"," *"," * ### Events"," * - connection"," * - connection.success"," * - connection.error"," *"," * @param settings {Object}"," *"," * @type {*}"," */","function Server( settings ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( this.constructor.name != 'Server' ) {","    return new Server( settings );","  }","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","  require( 'object-emitter' ).mixin( this );","","  // Set Server Settings.","  this.set({","    settings: Server.utility.defaults( settings, {","      host: 'localhost',","      port: 80123,","      path: '/',","      origin: '',","      passphrase: null,","      pfx: null,","      key: null,","      cert: null,","      ca: null","    }),","    identity: String( process.pid )","  });","","  // Define dynamic properties.","  Object.defineProperties( this, {","    Session: {","      value: require( './session' ),","      enumerable: false,","      configurable: false,","      writable: true","    },","    Server: {","      value: require( 'ws' ).createServer({","        host: this.get( 'settings.host' ),","        port: this.get( 'settings.port' ),","        path: this.get( 'settings.path' )","      }),","      enumerable: false,","      writable: true,","    },","    _events: {","      configurable: true,","      enumerable: false,","      writable: true","    },","    event: {","      configurable: true,","      enumerable: true,","      writable: true","    }","  })","","  // Event Handlers.","  this.Server.on( 'listening', this.listening.bind( this ) );","  this.Server.on( 'connection', this.connection.bind( this ) );","  this.Server.on( 'headers', this.headers.bind( this ) );","  this.Server.on( 'error', this.error.bind( this ) );","","  // @chainable","  return this;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Server.prototype, {","  configure: {","    /**","     * Configure Server","     *","     * Method executed when connection is ready.","     * Usage and semantics emulating Express.","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'listening', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  connection: {","    value: function connection( client ) {","      Server.debug( 'this.connection', typeof client );","","      // Build Session","      client.session = require( './session' ).create( client );","","      // New session created.","      this.emit( 'session', null, client.session, client, this.Server );","","      // Emit","      this.emit( 'connection', null, client, this.Server );","","      // @chainable","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  error: {","    value: function error( reason, errorCode ) {","      Server.debug( 'this.eror', error );","","      // Handle known errors.","      switch( error.code ) {","","        case 'EACCES': {","          this.emit( 'error.unable_to_bind', new Error( 'Server can not bind.' ), this.Server );","        } break;","","        case 'EADDRINUSE': {","          this.emit( 'error.address_in_use', new Error( 'Server port already used.' ), this.Server );","        } break;","","      }","","      // Emit","      this.emit( 'error', error, this.Server );","","      // @chainable","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  listening: {","    value: function listening() {","      Server.debug( 'bound to %s:%s.', this.Server._server.address().address, this.Server._server.address().port );","","      // Update / Verify Settings.","      this.set( 'settings', {","        host: this.Server._server.address().address,","        port: this.Server._server.address().port","      });","","      // Emit","      this.emit( 'listening', null, this.Server._server.address(), this.Server );","","      // @chainable","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  headers: {","    value: function headers( headers ) {","      Server.debug( 'this.headers', headers );","","      // Emit","      this.emit( 'headers', null, headers, this.Server );","","      // @chainable","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  }","});","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Server, {","  create: {","    value: function create( settings ) {","      return new Server( settings );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'wsmq:server' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: {","      defaults: require( 'abstract' ).utility.defaults,","      extend: require( 'abstract' ).utility.extend,","    },","    configurable: true,","    writable: true","  }","})",""];
