/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['session.js']) {
  _$jscoverage['session.js'] = [];
  _$jscoverage['session.js'][8] = 0;
  _$jscoverage['session.js'][11] = 0;
  _$jscoverage['session.js'][12] = 0;
  _$jscoverage['session.js'][16] = 0;
  _$jscoverage['session.js'][19] = 0;
  _$jscoverage['session.js'][43] = 0;
  _$jscoverage['session.js'][44] = 0;
  _$jscoverage['session.js'][45] = 0;
  _$jscoverage['session.js'][46] = 0;
  _$jscoverage['session.js'][47] = 0;
  _$jscoverage['session.js'][48] = 0;
  _$jscoverage['session.js'][51] = 0;
  _$jscoverage['session.js'][59] = 0;
  _$jscoverage['session.js'][72] = 0;
  _$jscoverage['session.js'][73] = 0;
  _$jscoverage['session.js'][75] = 0;
  _$jscoverage['session.js'][77] = 0;
  _$jscoverage['session.js'][78] = 0;
  _$jscoverage['session.js'][81] = 0;
  _$jscoverage['session.js'][82] = 0;
  _$jscoverage['session.js'][85] = 0;
  _$jscoverage['session.js'][94] = 0;
  _$jscoverage['session.js'][97] = 0;
  _$jscoverage['session.js'][98] = 0;
  _$jscoverage['session.js'][102] = 0;
  _$jscoverage['session.js'][113] = 0;
  _$jscoverage['session.js'][122] = 0;
  _$jscoverage['session.js'][130] = 0;
  _$jscoverage['session.js'][140] = 0;
  _$jscoverage['session.js'][143] = 0;
  _$jscoverage['session.js'][152] = 0;
  _$jscoverage['session.js'][155] = 0;
  _$jscoverage['session.js'][164] = 0;
  _$jscoverage['session.js'][167] = 0;
  _$jscoverage['session.js'][180] = 0;
  _$jscoverage['session.js'][183] = 0;
}
_$jscoverage['session.js'][8]++;
function Session(client) {
  _$jscoverage['session.js'][11]++;
  if (this.constructor.name != "Session") {
    _$jscoverage['session.js'][12]++;
    return new Session(client);
  }
  _$jscoverage['session.js'][16]++;
  require("object-settings").mixin(this);
  _$jscoverage['session.js'][19]++;
  Object.defineProperties(this, {key: {value: client.upgradeReq.headers["sec-webclient-key"], enumerable: true}, sid: {value: Math.random().toString(36).substring(2), enumerable: true}, headers: {value: client.upgradeReq.headers, enumerable: true}, method: {value: client.upgradeReq.method, enumerable: true}, path: {value: client.upgradeReq.url, enumerable: true}});
  _$jscoverage['session.js'][43]++;
  client.on("open", this.open);
  _$jscoverage['session.js'][44]++;
  client.on("message", this.message);
  _$jscoverage['session.js'][45]++;
  client.on("close", this.close);
  _$jscoverage['session.js'][46]++;
  client.on("ping", this.close);
  _$jscoverage['session.js'][47]++;
  client.on("pong", this.close);
  _$jscoverage['session.js'][48]++;
  client.on("error", this.close);
  _$jscoverage['session.js'][51]++;
  return this;
}
_$jscoverage['session.js'][59]++;
Object.defineProperties(Session.prototype, {configure: {value: (function configure(env, fn) {
  _$jscoverage['session.js'][72]++;
  var envs = "all";
  _$jscoverage['session.js'][73]++;
  var args = [].slice.call(arguments);
  _$jscoverage['session.js'][75]++;
  fn = args.pop();
  _$jscoverage['session.js'][77]++;
  if (args.length) {
    _$jscoverage['session.js'][78]++;
    envs = args;
  }
  _$jscoverage['session.js'][81]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['session.js'][82]++;
    this.on("open", fn.bind(this, this));
  }
  _$jscoverage['session.js'][85]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, message: {value: (function message(data, flags) {
  _$jscoverage['session.js'][94]++;
  Session.debug("this.message", arguments);
  _$jscoverage['session.js'][97]++;
  if (message instanceof Buffer) {
    _$jscoverage['session.js'][98]++;
    message = msgpack.unpack(settings.buffer);
  }
  _$jscoverage['session.js'][102]++;
  Session.utility.extend(message, {sid: this.sid, key: this.key, event: "object" === typeof message && message.event? message.event: message, data: message});
  _$jscoverage['session.js'][113]++;
  return this;
}), enumerable: false, writable: true, configurable: true}, open: {value: (function open() {
  _$jscoverage['session.js'][122]++;
  Session.debug("this.open", arguments);
}), enumerable: false, configurable: true, writable: true}, close: {value: (function close() {
  _$jscoverage['session.js'][130]++;
  Session.debug("this.close", arguments);
}), enumerable: false, configurable: true, writable: true}, error: {value: (function ping(error) {
  _$jscoverage['session.js'][140]++;
  Session.debug("this.error", arguments);
  _$jscoverage['session.js'][143]++;
  return this;
}), enumerable: false, configurable: true, writable: true}, ping: {value: (function ping(data, flags) {
  _$jscoverage['session.js'][152]++;
  Session.debug("this.ping", arguments);
  _$jscoverage['session.js'][155]++;
  return this;
}), enumerable: false, configurable: true, writable: true}, pong: {value: (function pong(data, flags) {
  _$jscoverage['session.js'][164]++;
  Session.debug("this.pong", arguments);
  _$jscoverage['session.js'][167]++;
  return this;
}), enumerable: false, configurable: true, writable: true}});
_$jscoverage['session.js'][180]++;
Object.defineProperties(module.exports = Session, {create: {value: (function create(client) {
  _$jscoverage['session.js'][183]++;
  return new Session(client);
}), enumerable: true, configurable: true, writable: true}, debug: {value: require("debug")("wsmq:session"), enumerable: false, configurable: true, writable: true}, utility: {value: {defaults: require("abstract").utility.defaults, extend: require("abstract").utility.extend}, configurable: true, writable: true}});
_$jscoverage['session.js'].source = ["/**"," * Session Builder"," *"," * @param client"," * @returns {Session}"," * @constructor"," */","function Session( client ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( this.constructor.name != 'Session' ) {","    return new Session( client );","  }","","  // Enable session-specific storage.","  require( 'object-settings' ).mixin( this );","","  // Computed Session Keys.","  Object.defineProperties( this, {","    key: {","      value: client.upgradeReq.headers[ 'sec-webclient-key' ],","      enumerable: true","    },","    sid: {","      value: Math.random().toString( 36 ).substring( 2 ),","      enumerable: true","    },","    headers: {","      value: client.upgradeReq.headers,","      enumerable: true","    },","    method: {","      value: client.upgradeReq.method,","      enumerable: true","    },","    path: {","      value: client.upgradeReq.url,","      enumerable: true","    }","  });","","  // Bind Event Handlers.","  client.on( 'open', this.open );","  client.on( 'message', this.message );","  client.on( 'close', this.close );","  client.on( 'ping', this.close );","  client.on( 'pong', this.close );","  client.on( 'error', this.close );","","  // @chainable","  return this;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Session.prototype, {","  configure: {","    /**","     * Configure Session","     *","     * Method executed when connection is ready.","     * Usage and semantics emulating Express.","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'open', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  message: {","    value: function message( data, flags ) {","      Session.debug( 'this.message', arguments );","","      // Parse to JSON","      if( message instanceof Buffer ) {","        message = msgpack.unpack( settings.buffer )","      }","","      // Add properties.","      Session.utility.extend( message, {","        sid: this.sid,","        key: this.key,","        event: 'object' === typeof message &amp;&amp; message.event ? message.event : message,","        data: message","      });","","      // Expose.","      // this.emit( 'message', null, message, client, this.Server );","","      // @chainable","      return this;","","    },","    enumerable: false,","    writable: true,","    configurable: true","  },","  open: {","    value: function open() {","      Session.debug( 'this.open', arguments );","    },","    enumerable: false,","    configurable: true,","    writable: true","  },","  close: {","    value: function close() {","      Session.debug( 'this.close', arguments );","","","    },","    enumerable: false,","    configurable: true,","    writable: true","  },","  error: {","    value: function ping( error ) {","      Session.debug( 'this.error', arguments );","","      // @chainable","      return this;","","    },","    enumerable: false,","    configurable: true,","    writable: true","  },","  ping: {","    value: function ping( data, flags ) {","      Session.debug( 'this.ping', arguments );","","      // @chainable","      return this;","","    },","    enumerable: false,","    configurable: true,","    writable: true","  },","  pong: {","    value: function pong( data, flags ) {","      Session.debug( 'this.pong', arguments );","","      // @chainable","      return this;","","    },","    enumerable: false,","    configurable: true,","    writable: true","  }","})","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Session, {","  create: {","    value: function create( client ) {","      return new Session( client );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'wsmq:session' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: {","      defaults: require( 'abstract' ).utility.defaults,","      extend: require( 'abstract' ).utility.extend,","    },","    configurable: true,","    writable: true","  }","})"];
