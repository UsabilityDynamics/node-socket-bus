/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['index.js']) {
  _$jscoverage['index.js'] = [];
  _$jscoverage['index.js'][5] = 0;
  _$jscoverage['index.js'][8] = 0;
  _$jscoverage['index.js'][9] = 0;
  _$jscoverage['index.js'][12] = 0;
  _$jscoverage['index.js'][13] = 0;
  _$jscoverage['index.js'][14] = 0;
  _$jscoverage['index.js'][15] = 0;
  _$jscoverage['index.js'][16] = 0;
  _$jscoverage['index.js'][19] = 0;
  _$jscoverage['index.js'][22] = 0;
  _$jscoverage['index.js'][30] = 0;
  _$jscoverage['index.js'][36] = 0;
  _$jscoverage['index.js'][39] = 0;
  _$jscoverage['index.js'][41] = 0;
  _$jscoverage['index.js'][44] = 0;
  _$jscoverage['index.js'][45] = 0;
  _$jscoverage['index.js'][52] = 0;
  _$jscoverage['index.js'][55] = 0;
  _$jscoverage['index.js'][63] = 0;
  _$jscoverage['index.js'][66] = 0;
  _$jscoverage['index.js'][69] = 0;
  _$jscoverage['index.js'][72] = 0;
  _$jscoverage['index.js'][80] = 0;
  _$jscoverage['index.js'][84] = 0;
  _$jscoverage['index.js'][89] = 0;
  _$jscoverage['index.js'][92] = 0;
  _$jscoverage['index.js'][97] = 0;
  _$jscoverage['index.js'][102] = 0;
  _$jscoverage['index.js'][110] = 0;
  _$jscoverage['index.js'][129] = 0;
  _$jscoverage['index.js'][138] = 0;
  _$jscoverage['index.js'][146] = 0;
  _$jscoverage['index.js'][155] = 0;
  _$jscoverage['index.js'][156] = 0;
  _$jscoverage['index.js'][159] = 0;
  _$jscoverage['index.js'][160] = 0;
  _$jscoverage['index.js'][161] = 0;
  _$jscoverage['index.js'][162] = 0;
  _$jscoverage['index.js'][163] = 0;
  _$jscoverage['index.js'][166] = 0;
  _$jscoverage['index.js'][167] = 0;
  _$jscoverage['index.js'][169] = 0;
  _$jscoverage['index.js'][181] = 0;
  _$jscoverage['index.js'][188] = 0;
  _$jscoverage['index.js'][189] = 0;
  _$jscoverage['index.js'][190] = 0;
  _$jscoverage['index.js'][192] = 0;
  _$jscoverage['index.js'][197] = 0;
  _$jscoverage['index.js'][199] = 0;
  _$jscoverage['index.js'][202] = 0;
  _$jscoverage['index.js'][203] = 0;
  _$jscoverage['index.js'][208] = 0;
  _$jscoverage['index.js'][213] = 0;
  _$jscoverage['index.js'][215] = 0;
  _$jscoverage['index.js'][216] = 0;
  _$jscoverage['index.js'][219] = 0;
  _$jscoverage['index.js'][220] = 0;
  _$jscoverage['index.js'][224] = 0;
  _$jscoverage['index.js'][229] = 0;
}
_$jscoverage['index.js'][5]++;
function WebSocket(settings, cb) {
  _$jscoverage['index.js'][8]++;
  if (! (this instanceof WebSocket)) {
    _$jscoverage['index.js'][9]++;
    return new WebSocket(options, cb);
  }
  _$jscoverage['index.js'][12]++;
  var self = this;
  _$jscoverage['index.js'][13]++;
  var validation = require("object-validation");
  _$jscoverage['index.js'][14]++;
  var msgpack = require("msgpack");
  _$jscoverage['index.js'][15]++;
  var ws = require("ws");
  _$jscoverage['index.js'][16]++;
  var extend = require("extend");
  _$jscoverage['index.js'][19]++;
  require("object-settings").mixin(this);
  _$jscoverage['index.js'][22]++;
  this.set({settings: settings, identity: String(process.pid), retry: 100, max_retry: 5000});
  _$jscoverage['index.js'][30]++;
  this.Server = new ws.Server({host: this.get("settings.host", "localhost"), port: this.get("settings.port", 92000), path: this.get("settings.port", "/")});
  _$jscoverage['index.js'][36]++;
  require("object-emitter").mixin(this);
  _$jscoverage['index.js'][39]++;
  this.Server.on("error", (function error(error) {
  _$jscoverage['index.js'][41]++;
  switch (error.code) {
  case "EADDRINUSE":
    _$jscoverage['index.js'][44]++;
    self.emit("error.address_in_use", new Error("WebSocket port already used."));
    _$jscoverage['index.js'][45]++;
    break;
  }
}));
  _$jscoverage['index.js'][52]++;
  this.Server.on("connection", (function connection(socket) {
  _$jscoverage['index.js'][55]++;
  socket.session = {key: socket.upgradeReq.headers["sec-websocket-key"], sid: Math.random().toString(36).substring(2), headers: socket.upgradeReq.headers, method: socket.upgradeReq.method, path: socket.upgradeReq.url};
  _$jscoverage['index.js'][63]++;
  socket.send("{\"event\":\"handshake\",\"sid\":\"" + socket.session.sid + "\"}");
  _$jscoverage['index.js'][66]++;
  socket.on("message", (function incoming(message) {
  _$jscoverage['index.js'][69]++;
  message = msgpack.unpack(message);
  _$jscoverage['index.js'][72]++;
  _extend(message, {id: socket.session.id, session: socket.session, event: "string" === typeof message? message: message.event, data: message});
  _$jscoverage['index.js'][80]++;
  Instance.emit("server.message", null, message);
}));
  _$jscoverage['index.js'][84]++;
  self.emit("connection", null);
}));
  _$jscoverage['index.js'][89]++;
  this.Server.on("listening", (function listening() {
  _$jscoverage['index.js'][92]++;
  self.set("settings", {host: this._server.address().address, port: this._server.address().port});
  _$jscoverage['index.js'][97]++;
  self.emit("listening", null);
}));
  _$jscoverage['index.js'][102]++;
  return this;
}
_$jscoverage['index.js'][110]++;
Object.defineProperties(WebSocket.prototype, {getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, getQueue2: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['index.js'][129]++;
Object.defineProperties(module.exports = WebSocket, {debug: {value: require("debug")("websocket-mq"), enumerable: true, configurable: true, writable: true}, createServer: {value: (function createServer(options, cb) {
  _$jscoverage['index.js'][138]++;
  return new WebSocket(options, cb);
}), enumerable: true, configurable: true, writable: true}, createProxy: {value: (function createProxy(options, cb) {
  _$jscoverage['index.js'][146]++;
  return new WebSocket(options, cb);
}), enumerable: true, configurable: true, writable: true}, createConnection: {value: (function createConnection(options, cb) {
  _$jscoverage['index.js'][155]++;
  if (! (this instanceof createConnection)) {
    _$jscoverage['index.js'][156]++;
    return new createConnection(options, cb);
  }
  _$jscoverage['index.js'][159]++;
  var Instance = this;
  _$jscoverage['index.js'][160]++;
  var validation = require("object-validation");
  _$jscoverage['index.js'][161]++;
  var msgpack = require("msgpack");
  _$jscoverage['index.js'][162]++;
  var ws = require("ws");
  _$jscoverage['index.js'][163]++;
  var extend = require("extend");
  _$jscoverage['index.js'][166]++;
  require("object-settings").mixin(this);
  _$jscoverage['index.js'][167]++;
  require("object-emitter").mixin(this);
  _$jscoverage['index.js'][169]++;
  options = extend({host: "localhost", port: 92000, origin: options.origin, passphrase: null, pfx: null, key: null, cert: null, ca: null}, options);
  _$jscoverage['index.js'][181]++;
  Instance.Client = new ws.createConnection("http://" + options.host + ":" + options.port, {origin: options.origin || options.host, passphrase: options.passphrase, pfx: options.pfx, key: options.key});
  _$jscoverage['index.js'][188]++;
  Instance.Client.on("open", (function open() {
  _$jscoverage['index.js'][189]++;
  require("object-settings").mixin(this);
  _$jscoverage['index.js'][190]++;
  require("object-emitter").mixin(this);
  _$jscoverage['index.js'][192]++;
  Instance.emit("open", null);
}));
  _$jscoverage['index.js'][197]++;
  Instance.Client.on("error", (function error(error) {
  _$jscoverage['index.js'][199]++;
  switch (error.code) {
  case "ECONNREFUSED":
    _$jscoverage['index.js'][202]++;
    Instance.emit("error.connection_refused", new Error("ServiceBus client could not connect to server."), this);
    _$jscoverage['index.js'][203]++;
    break;
  }
  _$jscoverage['index.js'][208]++;
  Instance.emit("error", error, this);
}));
  _$jscoverage['index.js'][213]++;
  Instance.Client.on("message", (function message(message, options, buffer) {
  _$jscoverage['index.js'][215]++;
  if (message instanceof Buffer) {
    _$jscoverage['index.js'][216]++;
    message = msgpack.unpack(options.buffer);
  }
  _$jscoverage['index.js'][219]++;
  if ("string" === typeof message) {
    _$jscoverage['index.js'][220]++;
    message = {event: message};
  }
  _$jscoverage['index.js'][224]++;
  Instance.emit("message", null, message);
}));
  _$jscoverage['index.js'][229]++;
  return this;
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['index.js'].source = ["/**"," *"," * @type {*}"," */","function WebSocket( settings, cb ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if (!(this instanceof WebSocket)) {","    return new WebSocket( options, cb );","  }","","  var self         = this;","  var validation   = require( 'object-validation' );","  var msgpack      = require( 'msgpack' );","  var ws           = require( 'ws' );","  var extend       = require( 'extend' );","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","","  // Configure instance.","  this.set({","    settings: settings,","    identity: String( process.pid ),","    retry: 100,","    max_retry: 5000","  });","","  // Start WebSocket Server.","  this.Server = new ws.Server({","    host: this.get( 'settings.host', 'localhost' ),","    port: this.get( 'settings.port', 92000 ),","    path: this.get( 'settings.port', '/' )","  });","","  require( 'object-emitter' ).mixin( this );","","  // Handle Server Errors.","  this.Server.on( 'error', function error( error ) {","","    switch( error.code ) {","","      case 'EADDRINUSE': {","        self.emit( 'error.address_in_use', new Error( 'WebSocket port already used.' ) );","      } break;","","    }","","  });","","  // Handle new Connections","  this.Server.on( 'connection', function connection( socket ) {","","    // Set Unique SessionID","    socket.session = {","      key: socket.upgradeReq.headers[ 'sec-websocket-key' ],","      sid: Math.random().toString( 36 ).substring( 2 ),","      headers: socket.upgradeReq.headers,","      method: socket.upgradeReq.method,","      path: socket.upgradeReq.url","    }","","    socket.send( '{\"event\":\"handshake\",\"sid\":\"' + socket.session.sid + '\"}' );","","    // Handle Incoming Messages.","    socket.on( 'message', function incoming( message ) {","","      // Parse to JSON","      message = msgpack.unpack( message )","","      // Add properties.","      _extend( message, {","        id: socket.session.id,","        session: socket.session,","        event: 'string' === typeof message ? message : message.event,","        data: message","      });","","      // Expose.","      Instance.emit( 'server.message', null, message );","","    });","","    self.emit( 'connection', null );","","  });","","  // Server Bound.","  this.Server.on( 'listening', function listening() {","","    // Update / Verify Settings.","    self.set( 'settings', {","      host: this._server.address().address,","      port: this._server.address().port","    });","","    self.emit( 'listening', null );","","  });","","  // Return server instance.","  return this;","","}","","/**"," * WebSocket MQ Server Properties."," *"," */","Object.defineProperties( WebSocket.prototype, {","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  getQueue2: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","})","","/**"," * WebSocket MQ Constructor Properties."," *"," */","Object.defineProperties( module.exports = WebSocket, {","  debug: {","    value: require( 'debug' )( 'websocket-mq' ),","    enumerable: true,","    configurable: true,","    writable: true","  },","  createServer: {","    value: function createServer( options, cb ) {","      return new WebSocket( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createProxy: {","    value: function createProxy( options, cb ) {","      return new WebSocket( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    value: function createConnection( options, cb ) {","","      if (!(this instanceof createConnection)) {","        return new createConnection( options, cb );","      }","","      var Instance     = this;","      var validation   = require( 'object-validation' );","      var msgpack      = require( 'msgpack' );","      var ws           = require( 'ws' );","      var extend       = require( 'extend' );","","      // Mixin Settings and EventEmitter","      require( 'object-settings' ).mixin( this );","      require( 'object-emitter' ).mixin( this );","","      options = extend({","        host: 'localhost',","        port: 92000,","        origin: options.origin,","        passphrase: null,","        pfx: null,","        key: null,","        cert: null,","        ca: null,","      }, options )","","      // Create Client Instance.","      Instance.Client = new ws.createConnection( 'http://' + options.host + ':' + options.port, {","        origin: options.origin || options.host,","        passphrase: options.passphrase,","        pfx: options.pfx,","        key: options.key","      });","","      Instance.Client.on( 'open', function open() {","        require( 'object-settings' ).mixin( this );","        require( 'object-emitter' ).mixin( this );","","        Instance.emit( 'open', null );","","      });","","      // Handle Client Errors.","      Instance.Client.on( 'error', function error( error ) {","","        switch( error.code ) {","","          case 'ECONNREFUSED': {","            Instance.emit( 'error.connection_refused', new Error( 'ServiceBus client could not connect to server.' ), this );","          } break;","","        }","","        // Expose general error.","        Instance.emit( 'error', error, this );","","      });","","      // Message from DSB","      Instance.Client.on( 'message', function message( message, options, buffer ) {","","        if( message instanceof Buffer ) {","          message = msgpack.unpack( options.buffer )","        }","","        if( 'string' === typeof message ) {","          message = { event: message }","        }","","        // Emit to Root EventEmitter","        Instance.emit( 'message', null, message );","","      });","","      // Return client instance.","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","})"];
