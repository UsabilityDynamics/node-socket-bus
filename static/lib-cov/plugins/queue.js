/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['plugins/queue.js']) {
  _$jscoverage['plugins/queue.js'] = [];
  _$jscoverage['plugins/queue.js'][6] = 0;
  _$jscoverage['plugins/queue.js'][24] = 0;
  _$jscoverage['plugins/queue.js'][25] = 0;
  _$jscoverage['plugins/queue.js'][27] = 0;
  _$jscoverage['plugins/queue.js'][33] = 0;
  _$jscoverage['plugins/queue.js'][39] = 0;
  _$jscoverage['plugins/queue.js'][40] = 0;
  _$jscoverage['plugins/queue.js'][41] = 0;
  _$jscoverage['plugins/queue.js'][42] = 0;
  _$jscoverage['plugins/queue.js'][43] = 0;
  _$jscoverage['plugins/queue.js'][45] = 0;
  _$jscoverage['plugins/queue.js'][46] = 0;
  _$jscoverage['plugins/queue.js'][49] = 0;
  _$jscoverage['plugins/queue.js'][56] = 0;
  _$jscoverage['plugins/queue.js'][57] = 0;
  _$jscoverage['plugins/queue.js'][58] = 0;
  _$jscoverage['plugins/queue.js'][59] = 0;
  _$jscoverage['plugins/queue.js'][66] = 0;
  _$jscoverage['plugins/queue.js'][67] = 0;
  _$jscoverage['plugins/queue.js'][68] = 0;
}
_$jscoverage['plugins/queue.js'][6]++;
var debug = require("debug")("axon:queue");
_$jscoverage['plugins/queue.js'][24]++;
module.exports = (function (options) {
  _$jscoverage['plugins/queue.js'][25]++;
  options = options || {};
  _$jscoverage['plugins/queue.js'][27]++;
  return (function (sock) {
  _$jscoverage['plugins/queue.js'][33]++;
  sock.queue = [];
  _$jscoverage['plugins/queue.js'][39]++;
  sock.on("connect", (function () {
  _$jscoverage['plugins/queue.js'][40]++;
  var prev = sock.queue;
  _$jscoverage['plugins/queue.js'][41]++;
  var len = prev.length;
  _$jscoverage['plugins/queue.js'][42]++;
  sock.queue = [];
  _$jscoverage['plugins/queue.js'][43]++;
  debug("flush %d messages", len);
  _$jscoverage['plugins/queue.js'][45]++;
  for (var i = 0; i < len; ++i) {
    _$jscoverage['plugins/queue.js'][46]++;
    this.send(prev[i]);
}
  _$jscoverage['plugins/queue.js'][49]++;
  sock.emit("flush", prev);
}));
  _$jscoverage['plugins/queue.js'][56]++;
  sock.enqueue = (function (msg) {
  _$jscoverage['plugins/queue.js'][57]++;
  var hwm = sock.settings.hwm;
  _$jscoverage['plugins/queue.js'][58]++;
  if (sock.queue.length >= hwm) {
    _$jscoverage['plugins/queue.js'][58]++;
    return drop(msg);
  }
  _$jscoverage['plugins/queue.js'][59]++;
  sock.queue.push(msg);
});
  _$jscoverage['plugins/queue.js'][66]++;
  function drop(msg) {
    _$jscoverage['plugins/queue.js'][67]++;
    debug("drop");
    _$jscoverage['plugins/queue.js'][68]++;
    sock.emit("drop", msg);
}
});
});
_$jscoverage['plugins/queue.js'].source = ["","/**"," * Module dependencies."," */","","var debug = require('debug')('axon:queue');","","/**"," * Queue plugin."," *"," * Provides an `.enqueue()` method to the `sock`. Messages"," * passed to `enqueue` will be buffered until the next"," * `connect` event is emitted."," *"," * Emits:"," *"," *  - `drop` (msg) when a message is dropped"," *  - `flush` (msgs) when the queue is flushed"," *"," * @param {Object} options"," * @api private"," */","","module.exports = function(options){","  options = options || {};","","  return function(sock){","","    /**","     * Message buffer.","     */","","    sock.queue = [];","","    /**","     * Flush `buf` on `connect`.","     */","","    sock.on('connect', function(){","      var prev = sock.queue;","      var len = prev.length;","      sock.queue = [];","      debug('flush %d messages', len);","","      for (var i = 0; i &lt; len; ++i) {","        this.send(prev[i]);","      }","","      sock.emit('flush', prev);","    });","","    /**","     * Pushes `msg` into `buf`.","     */","","    sock.enqueue = function(msg){","      var hwm = sock.settings.hwm;","      if (sock.queue.length &gt;= hwm) return drop(msg);","      sock.queue.push(msg);","    };","","    /**","     * Drop the given `msg`.","     */","","    function drop(msg) {","      debug('drop');","      sock.emit('drop', msg);","    }","  };","};"];
