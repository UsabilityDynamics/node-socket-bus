/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][15] = 0;
  _$jscoverage['server.js'][17] = 0;
  _$jscoverage['server.js'][18] = 0;
  _$jscoverage['server.js'][21] = 0;
  _$jscoverage['server.js'][22] = 0;
  _$jscoverage['server.js'][25] = 0;
  _$jscoverage['server.js'][26] = 0;
  _$jscoverage['server.js'][27] = 0;
  _$jscoverage['server.js'][30] = 0;
  _$jscoverage['server.js'][31] = 0;
  _$jscoverage['server.js'][32] = 0;
  _$jscoverage['server.js'][35] = 0;
  _$jscoverage['server.js'][42] = 0;
  _$jscoverage['server.js'][70] = 0;
  _$jscoverage['server.js'][72] = 0;
  _$jscoverage['server.js'][75] = 0;
  _$jscoverage['server.js'][77] = 0;
  _$jscoverage['server.js'][81] = 0;
  _$jscoverage['server.js'][82] = 0;
  _$jscoverage['server.js'][83] = 0;
  _$jscoverage['server.js'][86] = 0;
  _$jscoverage['server.js'][90] = 0;
  _$jscoverage['server.js'][91] = 0;
  _$jscoverage['server.js'][92] = 0;
  _$jscoverage['server.js'][95] = 0;
  _$jscoverage['server.js'][99] = 0;
  _$jscoverage['server.js'][100] = 0;
  _$jscoverage['server.js'][107] = 0;
  _$jscoverage['server.js'][110] = 0;
  _$jscoverage['server.js'][118] = 0;
  _$jscoverage['server.js'][121] = 0;
  _$jscoverage['server.js'][124] = 0;
  _$jscoverage['server.js'][125] = 0;
  _$jscoverage['server.js'][129] = 0;
  _$jscoverage['server.js'][137] = 0;
  _$jscoverage['server.js'][147] = 0;
  _$jscoverage['server.js'][150] = 0;
  _$jscoverage['server.js'][155] = 0;
  _$jscoverage['server.js'][157] = 0;
  _$jscoverage['server.js'][158] = 0;
  _$jscoverage['server.js'][168] = 0;
  _$jscoverage['server.js'][176] = 0;
  _$jscoverage['server.js'][189] = 0;
  _$jscoverage['server.js'][190] = 0;
  _$jscoverage['server.js'][192] = 0;
  _$jscoverage['server.js'][194] = 0;
  _$jscoverage['server.js'][195] = 0;
  _$jscoverage['server.js'][198] = 0;
  _$jscoverage['server.js'][199] = 0;
  _$jscoverage['server.js'][202] = 0;
  _$jscoverage['server.js'][239] = 0;
  _$jscoverage['server.js'][254] = 0;
  _$jscoverage['server.js'][262] = 0;
}
_$jscoverage['server.js'][15]++;
function Server() {
  _$jscoverage['server.js'][17]++;
  var settings = arguments[0] || {};
  _$jscoverage['server.js'][18]++;
  var callback = arguments[1] || null;
  _$jscoverage['server.js'][21]++;
  if (! (this instanceof Server)) {
    _$jscoverage['server.js'][22]++;
    return new Server(settings, callback);
  }
  _$jscoverage['server.js'][25]++;
  var instance = this;
  _$jscoverage['server.js'][26]++;
  var Server = require("ws").Server;
  _$jscoverage['server.js'][27]++;
  var amqp = require("amqp");
  _$jscoverage['server.js'][30]++;
  require("object-settings").mixin(instance);
  _$jscoverage['server.js'][31]++;
  require("object-emitter").mixin(instance);
  _$jscoverage['server.js'][32]++;
  require("object-emitter").inject(Server.Server.prototype);
  _$jscoverage['server.js'][35]++;
  instance.set({settings: settings, identity: String(process.pid), retry: 100, max_retry: 5000});
  _$jscoverage['server.js'][42]++;
  Object.defineProperties(instance, {Server: {value: new Server.Server({host: instance.get("settings.host", "localhost"), port: instance.get("settings.port", 80123), path: instance.get("settings.port", "/")}), enumerable: false, configurable: true, writable: true}, _events: {value: instance._events, configurable: true, enumerable: false}, event: {configurable: true, writable: true, enumerable: true}});
  _$jscoverage['server.js'][70]++;
  require("object-settings").mixin(instance.Server);
  _$jscoverage['server.js'][72]++;
  instance.emit("connecting", null, instance);
  _$jscoverage['server.js'][75]++;
  instance.Server.on("error", (function error(error) {
  _$jscoverage['server.js'][77]++;
  switch (error.code) {
  case "EACCES":
    _$jscoverage['server.js'][81]++;
    process.nextTick((function () {
  _$jscoverage['server.js'][82]++;
  instance.emit("error.unable_to_bind", new Error("Server can not bind."));
  _$jscoverage['server.js'][83]++;
  instance.emit("error", new Error("Server can not bind."));
}));
    _$jscoverage['server.js'][86]++;
    break;
  case "EADDRINUSE":
    _$jscoverage['server.js'][90]++;
    process.nextTick((function () {
  _$jscoverage['server.js'][91]++;
  instance.emit("error.address_in_use", new Error("Server port already used."));
  _$jscoverage['server.js'][92]++;
  instance.emit("error", new Error("Server port already used."));
}));
    _$jscoverage['server.js'][95]++;
    break;
  default:
    _$jscoverage['server.js'][99]++;
    instance.emit("error", new Error(error.message));
    _$jscoverage['server.js'][100]++;
    break;
  }
}));
  _$jscoverage['server.js'][107]++;
  instance.Server.on("connection", (function connection(socket) {
  _$jscoverage['server.js'][110]++;
  socket.session = {key: socket.upgradeReq.headers["sec-websocket-key"], sid: Math.random().toString(36).substring(2), headers: socket.upgradeReq.headers, method: socket.upgradeReq.method, path: socket.upgradeReq.url};
  _$jscoverage['server.js'][118]++;
  socket.send("{\"event\":\"handshake\",\"sid\":\"" + socket.session.sid + "\"}");
  _$jscoverage['server.js'][121]++;
  socket.on("message", (function incoming(message) {
  _$jscoverage['server.js'][124]++;
  if (message instanceof Buffer) {
    _$jscoverage['server.js'][125]++;
    message = msgpack.unpack(options.buffer);
  }
  _$jscoverage['server.js'][129]++;
  Server.utility.extend(message, {id: socket.session.id, session: socket.session, event: "string" === typeof message? message: message.event, data: message});
  _$jscoverage['server.js'][137]++;
  instance.emit("message", null, message);
}));
}));
  _$jscoverage['server.js'][147]++;
  instance.Server.on("listening", (function listening() {
  _$jscoverage['server.js'][150]++;
  instance.set("settings", {host: this._server.address().address, port: this._server.address().port});
  _$jscoverage['server.js'][155]++;
  instance.emit("listening", null, instance.Server);
  _$jscoverage['server.js'][157]++;
  if ("function" === typeof callback) {
    _$jscoverage['server.js'][158]++;
    callback(null, this);
  }
}));
  _$jscoverage['server.js'][168]++;
  return instance;
}
_$jscoverage['server.js'][176]++;
Object.defineProperties(Server.prototype, {configure: {value: (function configure(env, fn) {
  _$jscoverage['server.js'][189]++;
  var envs = "all";
  _$jscoverage['server.js'][190]++;
  var args = [].slice.call(arguments);
  _$jscoverage['server.js'][192]++;
  fn = args.pop();
  _$jscoverage['server.js'][194]++;
  if (args.length) {
    _$jscoverage['server.js'][195]++;
    envs = args;
  }
  _$jscoverage['server.js'][198]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['server.js'][199]++;
    this.on("connection.success", fn.bind(this, this));
  }
  _$jscoverage['server.js'][202]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, createBroker: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, subscribe: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, send: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['server.js'][239]++;
Object.defineProperties(module.exports = Server, {debug: {value: require("debug")("wsmq"), enumerable: false, configurable: true, writable: true}, utility: {value: require("./utility"), enumerable: false, configurable: true, writable: true}, createServer: {value: (function createServer(options, callback) {
  _$jscoverage['server.js'][254]++;
  return new Server(options, callback);
}), enumerable: true, configurable: true, writable: true}, createProxy: {value: (function createProxy(options, callback) {
  _$jscoverage['server.js'][262]++;
  return new Server(options, callback);
}), enumerable: true, configurable: true, writable: true}, createConnection: {value: require("./client"), enumerable: true, configurable: true, writable: true}, createClient: {value: require("./client"), enumerable: false, configurable: true, writable: true}});
_$jscoverage['server.js'].source = ["/**"," * WebSocket Server"," *"," * ### Events"," * - connection"," * - connection.success"," * - connection.error"," *"," *"," * @args settings {Object}"," * @args callback {Function}"," *"," * @type {*}"," */","function Server() {","","  var settings     = arguments[0] || {};","  var callback           = arguments[1] || null;","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( !( this instanceof Server ) ) {","    return new Server( settings, callback );","  }","","  var instance     = this;","  var Server       = require( 'ws' ).Server","  var amqp         = require( 'amqp' );","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( instance );","  require( 'object-emitter' ).mixin( instance );","  require( 'object-emitter' ).inject( Server.Server.prototype );","","  // Configure instance.","  instance.set({","    settings: settings,","    identity: String( process.pid ),","    retry: 100,","    max_retry: 5000","  });","","  Object.defineProperties( instance, {","    Server: {","      /**","       * Start Server Server.","       *","       */","      value: new Server.Server({","        host: instance.get( 'settings.host', 'localhost' ),","        port: instance.get( 'settings.port', 80123 ),","        path: instance.get( 'settings.port', '/' )","      }),","      enumerable: false,","      configurable: true,","      writable: true","    },","    _events: {","      value: instance._events,","      configurable: true,","      enumerable: false","    },","    event: {","      configurable: true,","      writable: true,","      enumerable: true","    }","  })","","  // @todo Fix actual bug in object-emitter that expects get method to be there","  require( 'object-settings' ).mixin( instance.Server );","","  instance.emit( 'connecting', null, instance );","","  // Handle Server Errors.","  instance.Server.on( 'error', function error( error ) {","","    switch( error.code ) {","","      case 'EACCES': {","","        process.nextTick( function() {","          instance.emit( 'error.unable_to_bind', new Error( 'Server can not bind.' ) );","          instance.emit( 'error', new Error( 'Server can not bind.' ) );","        });","","      } break;","","      case 'EADDRINUSE': {","","        process.nextTick( function() {","          instance.emit( 'error.address_in_use', new Error( 'Server port already used.' ) );","          instance.emit( 'error', new Error( 'Server port already used.' ) );","        });","","      } break;","","      default: {","        // Emit the generic error mesage.","        instance.emit( 'error', new Error( error.message ) );","      } break;","","    }","","  });","","  // Handle new Connections","  instance.Server.on( 'connection', function connection( socket ) {","","    // Set Unique SessionID","    socket.session = {","      key: socket.upgradeReq.headers[ 'sec-websocket-key' ],","      sid: Math.random().toString( 36 ).substring( 2 ),","      headers: socket.upgradeReq.headers,","      method: socket.upgradeReq.method,","      path: socket.upgradeReq.url","    }","","    socket.send( '{\"event\":\"handshake\",\"sid\":\"' + socket.session.sid + '\"}' );","","    // Handle Incoming Messages.","    socket.on( 'message', function incoming( message ) {","","      // Parse to JSON","      if( message instanceof Buffer ) {","        message = msgpack.unpack( options.buffer )","      }","","      // Add properties.","      Server.utility.extend( message, {","        id: socket.session.id,","        session: socket.session,","        event: 'string' === typeof message ? message : message.event,","        data: message","      });","","      // Expose.","      instance.emit( 'message', null, message );","","    });","","    // @todo Enable trigger as it is relied upon","    // instance.emit( 'connection.success', null, socket );","","  });","","  // Server Bound.","  instance.Server.on( 'listening', function listening() {","","    // Update / Verify Settings.","    instance.set( 'settings', {","      host: this._server.address().address,","      port: this._server.address().port","    });","","    instance.emit( 'listening', null, instance.Server );","","    if( 'function' === typeof callback ) {","      callback( null, this );","    }","","","  });","","  // Merge Server events into instance.","  // Server.utility.extend( instance._events, instance.Server._events );","","  // @chainable","  return instance;","","}","","/**"," * Server MQ Server Properties."," *"," */","Object.defineProperties( Server.prototype, {","  configure: {","    /**","     * Configure Server","     *","     * Method executed when connection is ready.","     * Usage and semantics emulating Express.","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'connection.success', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  createBroker: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  subscribe: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  send: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  }","})","","/**"," * Server MQ Constructor Properties."," *"," */","Object.defineProperties( module.exports = Server, {","  debug: {","    value: require( 'debug' )( 'wsmq' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  createServer: {","    value: function createServer( options, callback ) {","      return new Server( options, callback );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createProxy: {","    value: function createProxy( options, callback ) {","      return new Server( options, callback );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    value: require( './client' ),","    enumerable: true,","    configurable: true,","    writable: true","  },","  createClient: {","    value: require( './client' ),","    enumerable: false,","    configurable: true,","    writable: true","  }","})",""];
