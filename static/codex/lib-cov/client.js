/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['client.js']) {
  _$jscoverage['client.js'] = [];
  _$jscoverage['client.js'][12] = 0;
  _$jscoverage['client.js'][15] = 0;
  _$jscoverage['client.js'][16] = 0;
  _$jscoverage['client.js'][20] = 0;
  _$jscoverage['client.js'][21] = 0;
  _$jscoverage['client.js'][24] = 0;
  _$jscoverage['client.js'][39] = 0;
  _$jscoverage['client.js'][64] = 0;
  _$jscoverage['client.js'][66] = 0;
  _$jscoverage['client.js'][72] = 0;
  _$jscoverage['client.js'][73] = 0;
  _$jscoverage['client.js'][74] = 0;
  _$jscoverage['client.js'][75] = 0;
  _$jscoverage['client.js'][76] = 0;
  _$jscoverage['client.js'][77] = 0;
  _$jscoverage['client.js'][80] = 0;
  _$jscoverage['client.js'][88] = 0;
  _$jscoverage['client.js'][100] = 0;
  _$jscoverage['client.js'][101] = 0;
  _$jscoverage['client.js'][103] = 0;
  _$jscoverage['client.js'][105] = 0;
  _$jscoverage['client.js'][106] = 0;
  _$jscoverage['client.js'][109] = 0;
  _$jscoverage['client.js'][110] = 0;
  _$jscoverage['client.js'][113] = 0;
  _$jscoverage['client.js'][122] = 0;
  _$jscoverage['client.js'][127] = 0;
  _$jscoverage['client.js'][130] = 0;
  _$jscoverage['client.js'][139] = 0;
  _$jscoverage['client.js'][142] = 0;
  _$jscoverage['client.js'][145] = 0;
  _$jscoverage['client.js'][154] = 0;
  _$jscoverage['client.js'][156] = 0;
  _$jscoverage['client.js'][160] = 0;
  _$jscoverage['client.js'][165] = 0;
  _$jscoverage['client.js'][168] = 0;
  _$jscoverage['client.js'][177] = 0;
  _$jscoverage['client.js'][180] = 0;
  _$jscoverage['client.js'][183] = 0;
  _$jscoverage['client.js'][192] = 0;
  _$jscoverage['client.js'][195] = 0;
  _$jscoverage['client.js'][198] = 0;
  _$jscoverage['client.js'][209] = 0;
  _$jscoverage['client.js'][212] = 0;
  _$jscoverage['client.js'][213] = 0;
  _$jscoverage['client.js'][218] = 0;
  _$jscoverage['client.js'][221] = 0;
  _$jscoverage['client.js'][231] = 0;
  _$jscoverage['client.js'][254] = 0;
  _$jscoverage['client.js'][264] = 0;
}
_$jscoverage['client.js'][12]++;
function Client(settings) {
  _$jscoverage['client.js'][15]++;
  if (! (this instanceof Client)) {
    _$jscoverage['client.js'][16]++;
    return new Client(settings);
  }
  _$jscoverage['client.js'][20]++;
  require("object-settings").mixin(this);
  _$jscoverage['client.js'][21]++;
  require("object-emitter").mixin(this);
  _$jscoverage['client.js'][24]++;
  this.set({settings: Client.utility.defaults(settings, {host: "localhost", port: 92000, origin: "", passphrase: null, pfx: null, key: null, cert: null, ca: null}), identity: String(process.pid)});
  _$jscoverage['client.js'][39]++;
  Object.defineProperties(this, {Client: {value: require("ws").createConnection("http://" + this.get("settings.host") + ":" + this.get("settings.port"), {origin: this.get("settings.origin") || this.get("settings.origin"), passphrase: this.get("settings.passphrase"), pfx: this.get("settings.pfx"), key: this.get("settings.key")}), writable: true, enumerable: false, configurable: true}, _events: {value: this._events, configurable: true, writable: true, enumerable: false}, event: {configurable: true, enumerable: true, writable: true}});
  _$jscoverage['client.js'][64]++;
  setTimeout((function () {
  _$jscoverage['client.js'][66]++;
  this.send(Date.now().toString(), {mask: true});
}).bind(this.Client), 100);
  _$jscoverage['client.js'][72]++;
  this.Client.on("open", this.open.bind(this));
  _$jscoverage['client.js'][73]++;
  this.Client.on("close", this.close.bind(this));
  _$jscoverage['client.js'][74]++;
  this.Client.on("message", this.message.bind(this));
  _$jscoverage['client.js'][75]++;
  this.Client.on("ping", this.ping.bind(this));
  _$jscoverage['client.js'][76]++;
  this.Client.on("error", this.error.bind(this));
  _$jscoverage['client.js'][77]++;
  this.Client.on("data", this.data.bind(this));
  _$jscoverage['client.js'][80]++;
  return this;
}
_$jscoverage['client.js'][88]++;
Object.defineProperties(Client.prototype, {configure: {value: (function configure(env, fn) {
  _$jscoverage['client.js'][100]++;
  var envs = "all";
  _$jscoverage['client.js'][101]++;
  var args = [].slice.call(arguments);
  _$jscoverage['client.js'][103]++;
  fn = args.pop();
  _$jscoverage['client.js'][105]++;
  if (args.length) {
    _$jscoverage['client.js'][106]++;
    envs = args;
  }
  _$jscoverage['client.js'][109]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['client.js'][110]++;
    this.on("open", fn.bind(this, this));
  }
  _$jscoverage['client.js'][113]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, open: {value: (function open() {
  _$jscoverage['client.js'][122]++;
  Client.debug("this.open");
  _$jscoverage['client.js'][127]++;
  this.emit("open", null, this.Client._socket, this.Client);
  _$jscoverage['client.js'][130]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, close: {value: (function close() {
  _$jscoverage['client.js'][139]++;
  Client.debug("this.close", arguments);
  _$jscoverage['client.js'][142]++;
  this.emit("close", null, this.Client);
  _$jscoverage['client.js'][145]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, message: {value: (function message(message, settings, buffer) {
  _$jscoverage['client.js'][154]++;
  Client.debug("this.message", message, settings, buffer);
  _$jscoverage['client.js'][156]++;
  if (message instanceof Buffer) {
  }
  _$jscoverage['client.js'][160]++;
  if ("string" === typeof message) {
  }
  _$jscoverage['client.js'][165]++;
  this.emit("message", null, message, settings, buffer);
  _$jscoverage['client.js'][168]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, data: {value: (function data(data) {
  _$jscoverage['client.js'][177]++;
  Client.debug("this.data", arguments);
  _$jscoverage['client.js'][180]++;
  this.emit("data", null, data, this.Client);
  _$jscoverage['client.js'][183]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, ping: {value: (function ping(data, flags) {
  _$jscoverage['client.js'][192]++;
  Client.debug("this.ping", data, flags);
  _$jscoverage['client.js'][195]++;
  this.emit("ping", null, data, flaws, this.Client);
  _$jscoverage['client.js'][198]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, error: {value: (function error(error) {
  _$jscoverage['client.js'][209]++;
  switch (error.code) {
  case "ECONNREFUSED":
    _$jscoverage['client.js'][212]++;
    this.emit("error.connection_refused", new Error("Client could not connect to server."), this.Server);
    _$jscoverage['client.js'][213]++;
    break;
  }
  _$jscoverage['client.js'][218]++;
  this.emit("error", error, this.Client);
  _$jscoverage['client.js'][221]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, send: {value: (function send(data, options, cb) {
  _$jscoverage['client.js'][231]++;
  var WebSocket = this.Client;
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['client.js'][254]++;
Object.defineProperties(module.exports = Client, {create: {value: (function create(settings) {
  _$jscoverage['client.js'][264]++;
  return new Client(settings);
}), enumerable: false, configurable: true, writable: true}, debug: {value: require("debug")("wsmq:client"), enumerable: false, configurable: true, writable: true}, utility: {value: {defaults: require("abstract").utility.defaults, extend: require("abstract").utility.extend}, configurable: true, writable: true}});
_$jscoverage['client.js'].source = ["/**"," * WebSocket Client"," *"," * ### Events"," * - error"," *"," * @param settings {Object}"," * @param callback {Function}"," *"," * @type {*}"," */","function Client( settings ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if (!(this instanceof Client)) {","    return new Client( settings );","  }","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","  require( 'object-emitter' ).mixin( this );","","  // Set Client Settings.","  this.set({","    settings: Client.utility.defaults( settings, {","      host: 'localhost',","      port: 92000,","      origin: '',","      passphrase: null,","      pfx: null,","      key: null,","      cert: null,","      ca: null,","    }),","    identity: String( process.pid )","  });","","  // Create Client instance.","  Object.defineProperties( this, {","    Client: {","      value: require( 'ws' ).createConnection( 'http://' + this.get( 'settings.host' ) + ':' + this.get( 'settings.port' ), {","        origin: this.get( 'settings.origin' ) || this.get( 'settings.origin' ),","        passphrase: this.get( 'settings.passphrase' ),","        pfx: this.get( 'settings.pfx' ),","        key: this.get( 'settings.key' )","      }),","      writable: true,","      enumerable: false,","      configurable: true","    },","    _events: {","      value: this._events,","      configurable: true,","      writable: true,","      enumerable: false","    },","    event: {","      configurable: true,","      enumerable: true,","      writable: true","    }","  });","","  setTimeout( function() {","","    this.send( Date.now().toString(), {mask: true} )","","  }.bind( this.Client ), 100 )","","","  // Event Handlers.","  this.Client.on( 'open', this.open.bind( this ) );","  this.Client.on( 'close', this.close.bind( this ) );","  this.Client.on( 'message', this.message.bind( this ) );","  this.Client.on( 'ping', this.ping.bind( this ) );","  this.Client.on( 'error', this.error.bind( this ) );","  this.Client.on( 'data', this.data.bind( this ) );","","  // @chainable","  return this;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Client.prototype, {","  configure: {","    /**","     * Configure Client","     *","     * Method executed when connection is open.","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'open', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  open: {","    value: function open() {","      Client.debug( 'this.open' );","","","      // this.Client","      // Emit","      this.emit( 'open', null, this.Client._socket, this.Client );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  close: {","    value: function close( ) {","      Client.debug( 'this.close', arguments );","","      // Emit","      this.emit( 'close', null, this.Client );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  message: {","    value: function message( message, settings, buffer  ) {","      Client.debug( 'this.message', message, settings, buffer );","","      if( message instanceof Buffer ) {","        // message = msgpack.unpack( settings.buffer )","      }","","      if( 'string' === typeof message ) {","        /// message = { event: message }","      }","","      // Emit to Root EventEmitter","      this.emit( 'message', null, message, settings, buffer );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  data: {","    value: function data( data ) {","      Client.debug( 'this.data', arguments );","","      // Emit","      this.emit( 'data', null, data, this.Client );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  ping: {","    value: function ping( data, flags ) {","      Client.debug( 'this.ping', data, flags );","","      // Emit","      this.emit( 'ping', null, data, flaws, this.Client );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  error: {","    value: function error( error ) {","","      // Handle known errors.","      switch( error.code ) {","","        case 'ECONNREFUSED': {","          this.emit( 'error.connection_refused', new Error( 'Client could not connect to server.' ), this.Server );","        } break;","","      }","","      // Emit","      this.emit( 'error', error, this.Client );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  send: {","    value: function send( data, options, cb ) {","","      var WebSocket = this.Client;","      // console.log( 'this.readyState', this.Client.readyState );","      // console.log( 'WebSocket.OPEN', WebSocket.OPEN );","","      //console.log( this.Client._sender );","      //return;","      //this.Client._sender.send(data, options, cb);","","      //console.log( this.Client.readyState );","      // require( 'ws' ).prototype.send.bind( this.Client )( 'asdf' );","      // require( 'ws' ).prototype.send.call( this.Client, data, options, function sent( error ) {});","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","});","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Client, {","  create: {","    /**","     * Create WebSocket Client.","     *","     * @param settings","     *","     * @returns {Client}","     */","    value: function create( settings ) {","      return new Client( settings );","    },","    enumerable: false,","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'wsmq:client' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: {","      defaults: require( 'abstract' ).utility.defaults,","      extend: require( 'abstract' ).utility.extend,","    },","    configurable: true,","    writable: true","  }","})",""];
