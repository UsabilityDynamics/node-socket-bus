/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['sockets/req.js']) {
  _$jscoverage['sockets/req.js'] = [];
  _$jscoverage['sockets/req.js'][6] = 0;
  _$jscoverage['sockets/req.js'][15] = 0;
  _$jscoverage['sockets/req.js'][23] = 0;
  _$jscoverage['sockets/req.js'][24] = 0;
  _$jscoverage['sockets/req.js'][25] = 0;
  _$jscoverage['sockets/req.js'][26] = 0;
  _$jscoverage['sockets/req.js'][27] = 0;
  _$jscoverage['sockets/req.js'][28] = 0;
  _$jscoverage['sockets/req.js'][29] = 0;
  _$jscoverage['sockets/req.js'][36] = 0;
  _$jscoverage['sockets/req.js'][45] = 0;
  _$jscoverage['sockets/req.js'][46] = 0;
  _$jscoverage['sockets/req.js'][58] = 0;
  _$jscoverage['sockets/req.js'][59] = 0;
  _$jscoverage['sockets/req.js'][60] = 0;
  _$jscoverage['sockets/req.js'][61] = 0;
  _$jscoverage['sockets/req.js'][62] = 0;
  _$jscoverage['sockets/req.js'][63] = 0;
  _$jscoverage['sockets/req.js'][64] = 0;
  _$jscoverage['sockets/req.js'][65] = 0;
  _$jscoverage['sockets/req.js'][66] = 0;
  _$jscoverage['sockets/req.js'][78] = 0;
  _$jscoverage['sockets/req.js'][79] = 0;
  _$jscoverage['sockets/req.js'][86] = 0;
  _$jscoverage['sockets/req.js'][87] = 0;
  _$jscoverage['sockets/req.js'][88] = 0;
  _$jscoverage['sockets/req.js'][89] = 0;
  _$jscoverage['sockets/req.js'][90] = 0;
  _$jscoverage['sockets/req.js'][91] = 0;
  _$jscoverage['sockets/req.js'][92] = 0;
  _$jscoverage['sockets/req.js'][95] = 0;
  _$jscoverage['sockets/req.js'][96] = 0;
  _$jscoverage['sockets/req.js'][98] = 0;
  _$jscoverage['sockets/req.js'][99] = 0;
}
_$jscoverage['sockets/req.js'][6]++;
var Socket = require("./sock"), queue = require("../plugins/queue"), slice = require("../utils").slice, debug = require("debug")("axon:req");
_$jscoverage['sockets/req.js'][15]++;
module.exports = ReqSocket;
_$jscoverage['sockets/req.js'][23]++;
function ReqSocket() {
  _$jscoverage['sockets/req.js'][24]++;
  Socket.call(this);
  _$jscoverage['sockets/req.js'][25]++;
  this.n = 0;
  _$jscoverage['sockets/req.js'][26]++;
  this.ids = 0;
  _$jscoverage['sockets/req.js'][27]++;
  this.callbacks = {};
  _$jscoverage['sockets/req.js'][28]++;
  this.identity = this.get("identity");
  _$jscoverage['sockets/req.js'][29]++;
  this.use(queue());
}
_$jscoverage['sockets/req.js'][36]++;
ReqSocket.prototype.__proto__ = Socket.prototype;
_$jscoverage['sockets/req.js'][45]++;
ReqSocket.prototype.id = (function () {
  _$jscoverage['sockets/req.js'][46]++;
  return this.identity + ":" + this.ids++;
});
_$jscoverage['sockets/req.js'][58]++;
ReqSocket.prototype.onmessage = (function () {
  _$jscoverage['sockets/req.js'][59]++;
  var self = this;
  _$jscoverage['sockets/req.js'][60]++;
  return (function (msg, multipart) {
  _$jscoverage['sockets/req.js'][61]++;
  if (! multipart) {
    _$jscoverage['sockets/req.js'][61]++;
    return debug("expected multipart: %j", msg);
  }
  _$jscoverage['sockets/req.js'][62]++;
  var id = msg.pop();
  _$jscoverage['sockets/req.js'][63]++;
  var fn = self.callbacks[id];
  _$jscoverage['sockets/req.js'][64]++;
  if (! fn) {
    _$jscoverage['sockets/req.js'][64]++;
    return debug("missing callback %s", id);
  }
  _$jscoverage['sockets/req.js'][65]++;
  fn.apply(null, msg);
  _$jscoverage['sockets/req.js'][66]++;
  delete self.callbacks[id];
});
});
_$jscoverage['sockets/req.js'][78]++;
ReqSocket.prototype.send = (function (msg) {
  _$jscoverage['sockets/req.js'][79]++;
  var socks = this.socks, len = socks.length, sock = socks[this.n++ % len], args = Array.isArray(msg)? msg: slice(arguments);
  _$jscoverage['sockets/req.js'][86]++;
  if (sock) {
    _$jscoverage['sockets/req.js'][87]++;
    var hasCallback = "function" == typeof args[args.length - 1];
    _$jscoverage['sockets/req.js'][88]++;
    if (! hasCallback) {
      _$jscoverage['sockets/req.js'][88]++;
      args.push((function () {
}));
    }
    _$jscoverage['sockets/req.js'][89]++;
    var fn = args.pop();
    _$jscoverage['sockets/req.js'][90]++;
    fn.id = this.id();
    _$jscoverage['sockets/req.js'][91]++;
    this.callbacks[fn.id] = fn;
    _$jscoverage['sockets/req.js'][92]++;
    args.push(fn.id);
  }
  _$jscoverage['sockets/req.js'][95]++;
  if (sock) {
    _$jscoverage['sockets/req.js'][96]++;
    sock.write(this.pack(args));
  }
  else {
    _$jscoverage['sockets/req.js'][98]++;
    debug("no connected peers");
    _$jscoverage['sockets/req.js'][99]++;
    this.enqueue(args);
  }
});
_$jscoverage['sockets/req.js'].source = ["","/**"," * Module dependencies."," */","","var Socket = require('./sock')","  , queue = require('../plugins/queue')","  , slice = require('../utils').slice","  , debug = require('debug')('axon:req');","","/**"," * Expose `ReqSocket`."," */","","module.exports = ReqSocket;","","/**"," * Initialize a new `ReqSocket`."," *"," * @api private"," */","","function ReqSocket() {","  Socket.call(this);","  this.n = 0;","  this.ids = 0;","  this.callbacks = {};","  this.identity = this.get('identity');","  this.use(queue());","}","","/**"," * Inherits from `Socket.prototype`."," */","","ReqSocket.prototype.__proto__ = Socket.prototype;","","/**"," * Return a message id."," *"," * @return {String}"," * @api private"," */","","ReqSocket.prototype.id = function(){","  return this.identity + ':' + this.ids++;","};","","/**"," * Emits the \"message\" event with all message parts"," * after the null delimeter part."," *"," * @param {net.Socket} sock"," * @return {Function} closure(msg, multipart)"," * @api private"," */","","ReqSocket.prototype.onmessage = function(){","  var self = this;","  return function(msg, multipart){","    if (!multipart) return debug('expected multipart: %j', msg);","    var id = msg.pop();","    var fn = self.callbacks[id];","    if (!fn) return debug('missing callback %s', id);","    fn.apply(null, msg);","    delete self.callbacks[id];","  };","};","","/**"," * Sends `msg` to the remote peers. Appends"," * the null message part prior to sending."," *"," * @param {Mixed} msg"," * @api public"," */","","ReqSocket.prototype.send = function(msg){","  var socks = this.socks","    , len = socks.length","    , sock = socks[this.n++ % len]","    , args = Array.isArray(msg)","      ? msg","      : slice(arguments);","","  if (sock) {","    var hasCallback = 'function' == typeof args[args.length - 1];","    if (!hasCallback) args.push(function(){});","    var fn = args.pop();","    fn.id = this.id();","    this.callbacks[fn.id] = fn;","    args.push(fn.id);","  }","","  if (sock) {","    sock.write(this.pack(args));","  } else {","    debug('no connected peers');","    this.enqueue(args);","  }","};"];
