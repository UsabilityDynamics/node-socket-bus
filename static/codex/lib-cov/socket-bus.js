/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['socket-bus.js']) {
  _$jscoverage['socket-bus.js'] = [];
  _$jscoverage['socket-bus.js'][12] = 0;
  _$jscoverage['socket-bus.js'][15] = 0;
  _$jscoverage['socket-bus.js'][16] = 0;
  _$jscoverage['socket-bus.js'][20] = 0;
  _$jscoverage['socket-bus.js'][21] = 0;
  _$jscoverage['socket-bus.js'][24] = 0;
  _$jscoverage['socket-bus.js'][30] = 0;
  _$jscoverage['socket-bus.js'][38] = 0;
  _$jscoverage['socket-bus.js'][46] = 0;
  _$jscoverage['socket-bus.js'][86] = 0;
  _$jscoverage['socket-bus.js'][87] = 0;
  _$jscoverage['socket-bus.js'][89] = 0;
  _$jscoverage['socket-bus.js'][91] = 0;
  _$jscoverage['socket-bus.js'][92] = 0;
  _$jscoverage['socket-bus.js'][95] = 0;
  _$jscoverage['socket-bus.js'][96] = 0;
  _$jscoverage['socket-bus.js'][99] = 0;
  _$jscoverage['socket-bus.js'][112] = 0;
  _$jscoverage['socket-bus.js'][125] = 0;
}
_$jscoverage['socket-bus.js'][12]++;
function SocketBus(settings) {
  _$jscoverage['socket-bus.js'][15]++;
  if (! (this instanceof SocketBus)) {
    _$jscoverage['socket-bus.js'][16]++;
    return new SocketBus(settings);
  }
  _$jscoverage['socket-bus.js'][20]++;
  require("object-settings").mixin(this);
  _$jscoverage['socket-bus.js'][21]++;
  require("object-emitter").mixin(this);
  _$jscoverage['socket-bus.js'][24]++;
  this.set("settings", {host: "localhost", port: 9130, vhost: ""});
  _$jscoverage['socket-bus.js'][30]++;
  Object.defineProperties(module, {instances: {value: {}, writable: true}});
  _$jscoverage['socket-bus.js'][38]++;
  return this;
}
_$jscoverage['socket-bus.js'][46]++;
Object.defineProperties(SocketBus.prototype, {bind: {value: null, enumerable: true, writable: true}, connect: {value: null, enumerable: true, writable: true}, channel: {value: null, enumerable: true, writable: true}, publich: {value: null, enumerable: true, writable: true}, subscribe: {value: null, enumerable: true, writable: true}, unsubscribe: {value: null, enumerable: true, writable: true}, configure: {value: (function configure(env, fn) {
  _$jscoverage['socket-bus.js'][86]++;
  var envs = "all";
  _$jscoverage['socket-bus.js'][87]++;
  var args = [].slice.call(arguments);
  _$jscoverage['socket-bus.js'][89]++;
  fn = args.pop();
  _$jscoverage['socket-bus.js'][91]++;
  if (args.length) {
    _$jscoverage['socket-bus.js'][92]++;
    envs = args;
  }
  _$jscoverage['socket-bus.js'][95]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['socket-bus.js'][96]++;
    this.on("ready", fn.bind(this, this));
  }
  _$jscoverage['socket-bus.js'][99]++;
  return this;
}), enumerable: true, writable: true, configurable: true}});
_$jscoverage['socket-bus.js'][112]++;
Object.defineProperties(module.exports = SocketBus, {set: {value: null, enumerable: true, writable: true}, get: {value: null, enumerable: true, writable: true}, create: {value: (function create(options) {
  _$jscoverage['socket-bus.js'][125]++;
  return new SocketBus(options);
}), enumerable: true, configurable: true, writable: true}, createServer: {value: require("./server").create, enumerable: true, configurable: true, writable: true}, createConnection: {value: require("./client").create, enumerable: true, configurable: true, writable: true}, utility: {value: {defaults: require("abstract").utility.defaults, extend: require("abstract").utility.extend}, configurable: true, writable: true}, debug: {value: require("debug")("wsmq"), enumerable: false, configurable: true, writable: true}});
_$jscoverage['socket-bus.js'].source = ["/**"," * SocketBus Loader"," *"," * @param settings {Object}"," * @param callback {Function}"," *"," * @class SocketBus"," * @author potanin@UD"," *"," * @type {*}"," */","function SocketBus( settings ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( !( this instanceof SocketBus ) ) {","    return new SocketBus( settings );","  }","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","  require( 'object-emitter' ).mixin( this );","","  // Set Server Settings.","  this.set( 'settings', {","    host: 'localhost',","    port: 9130,","    vhost: ''","  });","","  Object.defineProperties( module, {","    instances: {","      value: {},","      writable: true","    }","  });","","  // @chainable","  return this;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( SocketBus.prototype, {","  bind: {","    value: null,","    enumerable: true,","    writable: true","  },","  connect: {","    value: null,","    enumerable: true,","    writable: true","  },","  channel: {","    value: null,","    enumerable: true,","    writable: true","  },","  publich: {","    value: null,","    enumerable: true,","    writable: true","  },","  subscribe: {","    value: null,","    enumerable: true,","    writable: true","  },","  unsubscribe: {","    value: null,","    enumerable: true,","    writable: true","  },","  configure: {","    /**","     * Configure","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'ready', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  }","});","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = SocketBus, {","  set: {","    value: null,","    enumerable: true,","    writable: true","  },","  get: {","    value: null,","    enumerable: true,","    writable: true","  },","  create: {","    value: function create( options) {","      return new SocketBus( options );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createServer: {","    /**","     * Create WebSocket Server.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: require( './server' ).create,","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    /**","     * Create WebSocket Client.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: require( './client' ).create,","    enumerable: true,","    configurable: true,","    writable: true","  },","  utility: {","    value: {","      defaults: require( 'abstract' ).utility.defaults,","      extend: require( 'abstract' ).utility.extend,","    },","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'wsmq' ),","    enumerable: false,","    configurable: true,","    writable: true","  }","});","",""];
