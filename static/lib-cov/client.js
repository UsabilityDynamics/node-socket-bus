/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['client.js']) {
  _$jscoverage['client.js'] = [];
  _$jscoverage['client.js'][5] = 0;
  _$jscoverage['client.js'][7] = 0;
  _$jscoverage['client.js'][8] = 0;
  _$jscoverage['client.js'][11] = 0;
  _$jscoverage['client.js'][14] = 0;
  _$jscoverage['client.js'][15] = 0;
  _$jscoverage['client.js'][16] = 0;
  _$jscoverage['client.js'][18] = 0;
  _$jscoverage['client.js'][30] = 0;
  _$jscoverage['client.js'][37] = 0;
  _$jscoverage['client.js'][42] = 0;
  _$jscoverage['client.js'][44] = 0;
  _$jscoverage['client.js'][47] = 0;
  _$jscoverage['client.js'][48] = 0;
  _$jscoverage['client.js'][58] = 0;
  _$jscoverage['client.js'][60] = 0;
  _$jscoverage['client.js'][61] = 0;
  _$jscoverage['client.js'][64] = 0;
  _$jscoverage['client.js'][65] = 0;
  _$jscoverage['client.js'][74] = 0;
  _$jscoverage['client.js'][77] = 0;
  _$jscoverage['client.js'][85] = 0;
  _$jscoverage['client.js'][116] = 0;
  _$jscoverage['client.js'][156] = 0;
  _$jscoverage['client.js'][171] = 0;
}
_$jscoverage['client.js'][5]++;
function Client(settings, cb) {
  _$jscoverage['client.js'][7]++;
  if (! (this instanceof Client)) {
    _$jscoverage['client.js'][8]++;
    return new Client(options, cb);
  }
  _$jscoverage['client.js'][11]++;
  var Instance = this;
  _$jscoverage['client.js'][14]++;
  require("object-settings").mixin(this);
  _$jscoverage['client.js'][15]++;
  require("object-emitter").mixin(this);
  _$jscoverage['client.js'][16]++;
  require("object-emitter").inject(ws.prototype);
  _$jscoverage['client.js'][18]++;
  options = extend({host: "localhost", port: 92000, origin: options.origin, passphrase: null, pfx: null, key: null, cert: null, ca: null}, options);
  _$jscoverage['client.js'][30]++;
  Instance.Client = new Client.ws.createConnection("http://" + options.host + ":" + options.port, {origin: options.origin || options.host, passphrase: options.passphrase, pfx: options.pfx, key: options.key});
  _$jscoverage['client.js'][37]++;
  Instance.Client.on("open", (function open() {
}));
  _$jscoverage['client.js'][42]++;
  Instance.Client.on("error", (function error(error) {
  _$jscoverage['client.js'][44]++;
  switch (error.code) {
  case "ECONNREFUSED":
    _$jscoverage['client.js'][47]++;
    Instance.emit("error.connection_refused", new Error("ServiceBus client could not connect to server."), this);
    _$jscoverage['client.js'][48]++;
    break;
  }
}));
  _$jscoverage['client.js'][58]++;
  Instance.Client.on("message", (function message(message, options, buffer) {
  _$jscoverage['client.js'][60]++;
  if (message instanceof Buffer) {
    _$jscoverage['client.js'][61]++;
    message = msgpack.unpack(options.buffer);
  }
  _$jscoverage['client.js'][64]++;
  if ("string" === typeof message) {
    _$jscoverage['client.js'][65]++;
    message = {event: message};
  }
}));
  _$jscoverage['client.js'][74]++;
  extend(Instance._events, Instance.Client._events);
  _$jscoverage['client.js'][77]++;
  return this;
}
_$jscoverage['client.js'][85]++;
Object.defineProperties(Client.prototype, {getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, createBroker: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, subscribe: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, send: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['client.js'][116]++;
Object.defineProperties(module.exports = Client, {ws: {value: require("ws"), enumerable: false, writable: true, configurable: true}, amqp: {value: require("amqp"), enumerable: false, writable: true, configurable: true}, debug: {value: require("debug")("websocket-mq"), enumerable: false, configurable: true, writable: true}, debug: {value: require("debug")("wsmq:client"), enumerable: false, configurable: true, writable: true}, utility: {value: require("./utility"), configurable: true, enumerable: false, writable: true}, createConnection: {value: (function createConnection(options, cb) {
  _$jscoverage['client.js'][156]++;
  return new Client(options, cb);
}), enumerable: true, configurable: true, writable: true}, createClient: {value: (function createClient(options, cb) {
  _$jscoverage['client.js'][171]++;
  return new Client(options, cb);
}), enumerable: false, configurable: true, writable: true}});
_$jscoverage['client.js'].source = ["/**"," *"," * @type {*}"," */","function Client( settings, cb ) {","","  if (!(this instanceof Client)) {","    return new Client( options, cb );","  }","","  var Instance     = this;","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","  require( 'object-emitter' ).mixin( this );","  require( 'object-emitter' ).inject( ws.prototype );","","  options = extend({","    host: 'localhost',","    port: 92000,","    origin: options.origin,","    passphrase: null,","    pfx: null,","    key: null,","    cert: null,","    ca: null,","  }, options )","","  // Create Client Instance.","  Instance.Client = new Client.ws.createConnection( 'http://' + options.host + ':' + options.port, {","    origin: options.origin || options.host,","    passphrase: options.passphrase,","    pfx: options.pfx,","    key: options.key","  });","","  Instance.Client.on( 'open', function open() {","    // Instance.emit( 'open', null );","  });","","  // Handle Client Errors.","  Instance.Client.on( 'error', function error( error ) {","","    switch( error.code ) {","","      case 'ECONNREFUSED': {","        Instance.emit( 'error.connection_refused', new Error( 'ServiceBus client could not connect to server.' ), this );","      } break;","","    }","","    // Expose general error.","    // Instance.emit( 'error', error, this );","","  });","","  // Message from DSB","  Instance.Client.on( 'message', function message( message, options, buffer ) {","","    if( message instanceof Buffer ) {","      message = msgpack.unpack( options.buffer )","    }","","    if( 'string' === typeof message ) {","      message = { event: message }","    }","","    // Emit to Root EventEmitter","    // Instance.emit( 'message', null, message );","","  });","","  // Merge Server events into instance.","  extend( Instance._events, Instance.Client._events );","","  // Return client instance.","  return this;","","}","","/**"," * WebSocket MQ Server Properties."," *"," */","Object.defineProperties( Client.prototype, {","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  createBroker: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  subscribe: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  send: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  }","})","","/**"," * WebSocket MQ Constructor Properties."," *"," */","Object.defineProperties( module.exports = Client, {","  ws: {","    value: require( 'ws' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  amqp: {","    value: require( 'amqp' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  debug: {","    value: require( 'debug' )( 'websocket-mq' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'wsmq:client' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    configurable: true,","    enumerable: false,","    writable: true","  },","  createConnection: {","    /**","     * Create WebSocket Client.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: function createConnection( options, cb ) {","      return new Client( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createClient: {","    /**","     * Create WebSocket Client.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: function createClient( options, cb ) {","      return new Client( options, cb );","    },","    enumerable: false,","    configurable: true,","    writable: true","  }","})",""];
