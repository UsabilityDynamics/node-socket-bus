/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['client.js']) {
  _$jscoverage['client.js'] = [];
  _$jscoverage['client.js'][5] = 0;
  _$jscoverage['client.js'][7] = 0;
  _$jscoverage['client.js'][8] = 0;
  _$jscoverage['client.js'][9] = 0;
  _$jscoverage['client.js'][11] = 0;
  _$jscoverage['client.js'][12] = 0;
  _$jscoverage['client.js'][15] = 0;
  _$jscoverage['client.js'][16] = 0;
  _$jscoverage['client.js'][17] = 0;
  _$jscoverage['client.js'][18] = 0;
  _$jscoverage['client.js'][19] = 0;
  _$jscoverage['client.js'][22] = 0;
  _$jscoverage['client.js'][23] = 0;
  _$jscoverage['client.js'][24] = 0;
  _$jscoverage['client.js'][26] = 0;
  _$jscoverage['client.js'][38] = 0;
  _$jscoverage['client.js'][57] = 0;
  _$jscoverage['client.js'][60] = 0;
  _$jscoverage['client.js'][65] = 0;
  _$jscoverage['client.js'][67] = 0;
  _$jscoverage['client.js'][70] = 0;
  _$jscoverage['client.js'][71] = 0;
  _$jscoverage['client.js'][81] = 0;
  _$jscoverage['client.js'][83] = 0;
  _$jscoverage['client.js'][84] = 0;
  _$jscoverage['client.js'][87] = 0;
  _$jscoverage['client.js'][88] = 0;
  _$jscoverage['client.js'][100] = 0;
  _$jscoverage['client.js'][108] = 0;
  _$jscoverage['client.js'][134] = 0;
  _$jscoverage['client.js'][147] = 0;
  _$jscoverage['client.js'][169] = 0;
  _$jscoverage['client.js'][184] = 0;
}
_$jscoverage['client.js'][5]++;
function Client() {
  _$jscoverage['client.js'][7]++;
  var args = [].slice.call(arguments);
  _$jscoverage['client.js'][8]++;
  var options = args[0] || {};
  _$jscoverage['client.js'][9]++;
  var cb = args[1] || null;
  _$jscoverage['client.js'][11]++;
  if (! (this instanceof Client)) {
    _$jscoverage['client.js'][12]++;
    return new Client(options, cb);
  }
  _$jscoverage['client.js'][15]++;
  var instance = this;
  _$jscoverage['client.js'][16]++;
  var ws = require("ws");
  _$jscoverage['client.js'][17]++;
  var msgpack = require("msgpack");
  _$jscoverage['client.js'][18]++;
  var extend = require("extend");
  _$jscoverage['client.js'][19]++;
  var amqp = require("amqp");
  _$jscoverage['client.js'][22]++;
  require("object-settings").mixin(this);
  _$jscoverage['client.js'][23]++;
  require("object-emitter").mixin(this);
  _$jscoverage['client.js'][24]++;
  require("object-emitter").inject(ws.prototype);
  _$jscoverage['client.js'][26]++;
  options = extend({host: "localhost", port: 92000, origin: options.origin, passphrase: null, pfx: null, key: null, cert: null, ca: null}, options);
  _$jscoverage['client.js'][38]++;
  Object.defineProperties(instance, {Client: {value: new ws.createConnection("http://" + options.host + ":" + options.port, {origin: options.origin || options.host, passphrase: options.passphrase, pfx: options.pfx, key: options.key}), enumerable: false, configurable: true}, _events: {value: instance._events, configurable: true, enumerable: false}});
  _$jscoverage['client.js'][57]++;
  require("object-settings").mixin(instance.Client);
  _$jscoverage['client.js'][60]++;
  instance.Client.on("open", (function open(handshake) {
}));
  _$jscoverage['client.js'][65]++;
  instance.Client.on("error", (function error(error) {
  _$jscoverage['client.js'][67]++;
  switch (error.code) {
  case "ECONNREFUSED":
    _$jscoverage['client.js'][70]++;
    instance.emit("error.connection_refused", new Error("ServiceBus client could not connect to server."), this);
    _$jscoverage['client.js'][71]++;
    break;
  }
}));
  _$jscoverage['client.js'][81]++;
  instance.Client.on("message", (function message(message, options, buffer) {
  _$jscoverage['client.js'][83]++;
  if (message instanceof Buffer) {
    _$jscoverage['client.js'][84]++;
    message = msgpack.unpack(options.buffer);
  }
  _$jscoverage['client.js'][87]++;
  if ("string" === typeof message) {
    _$jscoverage['client.js'][88]++;
    message = {event: message};
  }
}));
  _$jscoverage['client.js'][100]++;
  return instance;
}
_$jscoverage['client.js'][108]++;
Object.defineProperties(Client.prototype, {getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, createBroker: {value: (function createBroker() {
}), enumerable: true, configurable: true, writable: true}, subscribe: {value: (function subscribe() {
}), enumerable: true, configurable: true, writable: true}, send: {value: (function send() {
  _$jscoverage['client.js'][134]++;
  return this;
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['client.js'][147]++;
Object.defineProperties(module.exports = Client, {debug: {value: require("debug")("wsmq:client"), enumerable: false, configurable: true, writable: true}, utility: {value: require("./utility"), configurable: true, enumerable: false, writable: true}, createConnection: {value: (function createConnection(options, cb) {
  _$jscoverage['client.js'][169]++;
  return new Client(options, cb);
}), enumerable: true, configurable: true, writable: true}, createClient: {value: (function createClient(options, cb) {
  _$jscoverage['client.js'][184]++;
  return new Client(options, cb);
}), enumerable: false, configurable: true, writable: true}});
_$jscoverage['client.js'].source = ["/**"," *"," * @type {*}"," */","function Client() {","","  var args         = [].slice.call( arguments );","  var options      = args[0] || {};","  var cb           = args[1] || null;","","  if (!(this instanceof Client)) {","    return new Client( options, cb );","  }","","  var instance     = this;","  var ws           = require( 'ws' );","  var msgpack      = require( 'msgpack' );","  var extend       = require( 'extend' );","  var amqp         = require( 'amqp' );","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( this );","  require( 'object-emitter' ).mixin( this );","  require( 'object-emitter' ).inject( ws.prototype );","","  options = extend({","    host: 'localhost',","    port: 92000,","    origin: options.origin,","    passphrase: null,","    pfx: null,","    key: null,","    cert: null,","    ca: null,","  }, options )","","  // Create Client instance.","  Object.defineProperties( instance, {","    Client: {","      value: new ws.createConnection( 'http://' + options.host + ':' + options.port, {","        origin: options.origin || options.host,","        passphrase: options.passphrase,","        pfx: options.pfx,","        key: options.key","      }),","      enumerable: false,","      configurable: true","    },","    _events: {","      value: instance._events,","      configurable: true,","      enumerable: false","    }","  })","","  // @todo Fix actual bug in object-emitter that expects get method to be there","  require( 'object-settings' ).mixin( instance.Client );","","  // @todo Ensure this can be ignored.","  instance.Client.on( 'open', function open( handshake ) {","    // instance.emit( 'open', null );","  });","","  // Handle Client Errors.","  instance.Client.on( 'error', function error( error ) {","","    switch( error.code ) {","","      case 'ECONNREFUSED': {","        instance.emit( 'error.connection_refused', new Error( 'ServiceBus client could not connect to server.' ), this );","      } break;","","    }","","    // Expose general error.","    // instance.emit( 'error', error, this );","","  });","","  // Message from DSB","  instance.Client.on( 'message', function message( message, options, buffer ) {","","    if( message instanceof Buffer ) {","      message = msgpack.unpack( options.buffer )","    }","","    if( 'string' === typeof message ) {","      message = { event: message }","    }","","    // Emit to Root EventEmitter","    // instance.emit( 'message', null, message );","","  });","","  // Merge Server events into instance.","  // extend( instance._events, instance.Client._events );","","  // @chainable","  return instance;","","}","","/**"," * WebSocket MQ Server Properties."," *"," */","Object.defineProperties( Client.prototype, {","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  createBroker: {","    value: function createBroker() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  subscribe: {","    value: function subscribe() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  send: {","    value: function send() {","","      // Get real Client object","      // this.Client.send();","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","})","","/**"," * WebSocket MQ Constructor Properties."," *"," */","Object.defineProperties( module.exports = Client, {","  debug: {","    value: require( 'debug' )( 'wsmq:client' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    configurable: true,","    enumerable: false,","    writable: true","  },","  createConnection: {","    /**","     * Create WebSocket Client.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: function createConnection( options, cb ) {","      return new Client( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createClient: {","    /**","     * Create WebSocket Client.","     *","     * @param options","     * @param cb","     * @returns {Client}","     */","    value: function createClient( options, cb ) {","      return new Client( options, cb );","    },","    enumerable: false,","    configurable: true,","    writable: true","  }","})",""];
