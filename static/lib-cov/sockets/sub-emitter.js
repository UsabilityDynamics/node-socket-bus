/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['sockets/sub-emitter.js']) {
  _$jscoverage['sockets/sub-emitter.js'] = [];
  _$jscoverage['sockets/sub-emitter.js'][6] = 0;
  _$jscoverage['sockets/sub-emitter.js'][12] = 0;
  _$jscoverage['sockets/sub-emitter.js'][20] = 0;
  _$jscoverage['sockets/sub-emitter.js'][21] = 0;
  _$jscoverage['sockets/sub-emitter.js'][22] = 0;
  _$jscoverage['sockets/sub-emitter.js'][23] = 0;
  _$jscoverage['sockets/sub-emitter.js'][24] = 0;
  _$jscoverage['sockets/sub-emitter.js'][25] = 0;
  _$jscoverage['sockets/sub-emitter.js'][26] = 0;
  _$jscoverage['sockets/sub-emitter.js'][27] = 0;
  _$jscoverage['sockets/sub-emitter.js'][38] = 0;
  _$jscoverage['sockets/sub-emitter.js'][39] = 0;
  _$jscoverage['sockets/sub-emitter.js'][40] = 0;
  _$jscoverage['sockets/sub-emitter.js'][42] = 0;
  _$jscoverage['sockets/sub-emitter.js'][43] = 0;
  _$jscoverage['sockets/sub-emitter.js'][47] = 0;
  _$jscoverage['sockets/sub-emitter.js'][48] = 0;
  _$jscoverage['sockets/sub-emitter.js'][49] = 0;
  _$jscoverage['sockets/sub-emitter.js'][50] = 0;
  _$jscoverage['sockets/sub-emitter.js'][51] = 0;
  _$jscoverage['sockets/sub-emitter.js'][52] = 0;
  _$jscoverage['sockets/sub-emitter.js'][54] = 0;
  _$jscoverage['sockets/sub-emitter.js'][69] = 0;
  _$jscoverage['sockets/sub-emitter.js'][70] = 0;
  _$jscoverage['sockets/sub-emitter.js'][71] = 0;
  _$jscoverage['sockets/sub-emitter.js'][76] = 0;
}
_$jscoverage['sockets/sub-emitter.js'][6]++;
var SubSocket = require("./sub");
_$jscoverage['sockets/sub-emitter.js'][12]++;
module.exports = SubEmitterSocket;
_$jscoverage['sockets/sub-emitter.js'][20]++;
function SubEmitterSocket() {
  _$jscoverage['sockets/sub-emitter.js'][21]++;
  this.sock = new SubSocket();
  _$jscoverage['sockets/sub-emitter.js'][22]++;
  this.sock.format("json");
  _$jscoverage['sockets/sub-emitter.js'][23]++;
  this.sock.onmessage = this.onmessage.bind(this);
  _$jscoverage['sockets/sub-emitter.js'][24]++;
  this.bind = this.sock.bind.bind(this.sock);
  _$jscoverage['sockets/sub-emitter.js'][25]++;
  this.connect = this.sock.connect.bind(this.sock);
  _$jscoverage['sockets/sub-emitter.js'][26]++;
  this.close = this.sock.close.bind(this.sock);
  _$jscoverage['sockets/sub-emitter.js'][27]++;
  this.listeners = [];
}
_$jscoverage['sockets/sub-emitter.js'][38]++;
SubEmitterSocket.prototype.onmessage = (function () {
  _$jscoverage['sockets/sub-emitter.js'][39]++;
  var self = this;
  _$jscoverage['sockets/sub-emitter.js'][40]++;
  var listeners = this.listeners;
  _$jscoverage['sockets/sub-emitter.js'][42]++;
  return (function (msg, multipart) {
  _$jscoverage['sockets/sub-emitter.js'][43]++;
  var topic = multipart? msg[0].toString(): msg.toString();
  _$jscoverage['sockets/sub-emitter.js'][47]++;
  for (var i = 0; i < listeners.length; ++i) {
    _$jscoverage['sockets/sub-emitter.js'][48]++;
    var listener = listeners[i];
    _$jscoverage['sockets/sub-emitter.js'][49]++;
    var m = listener.re.exec(topic);
    _$jscoverage['sockets/sub-emitter.js'][50]++;
    if (! m) {
      _$jscoverage['sockets/sub-emitter.js'][50]++;
      continue;
    }
    _$jscoverage['sockets/sub-emitter.js'][51]++;
    if (multipart) {
      _$jscoverage['sockets/sub-emitter.js'][52]++;
      listener.fn.apply(this, m.slice(1).concat(msg.slice(1)));
    }
    else {
      _$jscoverage['sockets/sub-emitter.js'][54]++;
      listener.fn.apply(this, m.slice(1));
    }
}
});
});
_$jscoverage['sockets/sub-emitter.js'][69]++;
SubEmitterSocket.prototype.on = (function (event, fn) {
  _$jscoverage['sockets/sub-emitter.js'][70]++;
  var re = this.sock.subscribe(event);
  _$jscoverage['sockets/sub-emitter.js'][71]++;
  this.listeners.push({event: event, re: re, fn: fn});
  _$jscoverage['sockets/sub-emitter.js'][76]++;
  return this;
});
_$jscoverage['sockets/sub-emitter.js'].source = ["","/**"," * Module dependencies."," */","","var SubSocket = require('./sub');","","/**"," * Expose `SubEmitterSocket`."," */","","module.exports = SubEmitterSocket;","","/**"," * Initialzie a new `SubEmitterSocket`."," *"," * @api private"," */","","function SubEmitterSocket() { ","  this.sock = new SubSocket;","  this.sock.format('json');","  this.sock.onmessage = this.onmessage.bind(this);","  this.bind = this.sock.bind.bind(this.sock);","  this.connect = this.sock.connect.bind(this.sock);","  this.close = this.sock.close.bind(this.sock);","  this.listeners = [];","}","","/**"," * Message handler."," *"," * @param {net.Socket} sock"," * @return {Function} closure(msg, mulitpart)"," * @api private"," */","","SubEmitterSocket.prototype.onmessage = function(){","  var self = this;","  var listeners = this.listeners;","","  return function(msg, multipart){","    var topic = multipart","      ? msg[0].toString()","      : msg.toString();","","    for (var i = 0; i &lt; listeners.length; ++i) {","      var listener = listeners[i];","      var m = listener.re.exec(topic);","      if (!m) continue;","      if (multipart) {","        listener.fn.apply(this, m.slice(1).concat(msg.slice(1)));","      } else {","        listener.fn.apply(this, m.slice(1));","      }","    }","  }","};","","/**"," * Subscribe to `event` and invoke the given callback `fn`."," *"," * @param {String} event"," * @param {Function} fn"," * @return {SubEmitterSocket} self"," * @api public"," */","","SubEmitterSocket.prototype.on = function(event, fn){","  var re = this.sock.subscribe(event);","  this.listeners.push({","    event: event,","    re: re,","    fn: fn","  });","  return this;","};"];
