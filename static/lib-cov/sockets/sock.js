/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['sockets/sock.js']) {
  _$jscoverage['sockets/sock.js'] = [];
  _$jscoverage['sockets/sock.js'][6] = 0;
  _$jscoverage['sockets/sock.js'][19] = 0;
  _$jscoverage['sockets/sock.js'][33] = 0;
  _$jscoverage['sockets/sock.js'][49] = 0;
  _$jscoverage['sockets/sock.js'][50] = 0;
  _$jscoverage['sockets/sock.js'][51] = 0;
  _$jscoverage['sockets/sock.js'][52] = 0;
  _$jscoverage['sockets/sock.js'][53] = 0;
  _$jscoverage['sockets/sock.js'][54] = 0;
  _$jscoverage['sockets/sock.js'][55] = 0;
  _$jscoverage['sockets/sock.js'][56] = 0;
  _$jscoverage['sockets/sock.js'][57] = 0;
  _$jscoverage['sockets/sock.js'][58] = 0;
  _$jscoverage['sockets/sock.js'][59] = 0;
  _$jscoverage['sockets/sock.js'][66] = 0;
  _$jscoverage['sockets/sock.js'][72] = 0;
  _$jscoverage['sockets/sock.js'][81] = 0;
  _$jscoverage['sockets/sock.js'][82] = 0;
  _$jscoverage['sockets/sock.js'][83] = 0;
  _$jscoverage['sockets/sock.js'][94] = 0;
  _$jscoverage['sockets/sock.js'][95] = 0;
  _$jscoverage['sockets/sock.js'][96] = 0;
  _$jscoverage['sockets/sock.js'][97] = 0;
  _$jscoverage['sockets/sock.js'][98] = 0;
  _$jscoverage['sockets/sock.js'][116] = 0;
  _$jscoverage['sockets/sock.js'][117] = 0;
  _$jscoverage['sockets/sock.js'][120] = 0;
  _$jscoverage['sockets/sock.js'][121] = 0;
  _$jscoverage['sockets/sock.js'][122] = 0;
  _$jscoverage['sockets/sock.js'][125] = 0;
  _$jscoverage['sockets/sock.js'][128] = 0;
  _$jscoverage['sockets/sock.js'][137] = 0;
  _$jscoverage['sockets/sock.js'][138] = 0;
  _$jscoverage['sockets/sock.js'][139] = 0;
  _$jscoverage['sockets/sock.js'][140] = 0;
  _$jscoverage['sockets/sock.js'][154] = 0;
  _$jscoverage['sockets/sock.js'][155] = 0;
  _$jscoverage['sockets/sock.js'][156] = 0;
  _$jscoverage['sockets/sock.js'][157] = 0;
  _$jscoverage['sockets/sock.js'][158] = 0;
  _$jscoverage['sockets/sock.js'][168] = 0;
  _$jscoverage['sockets/sock.js'][169] = 0;
  _$jscoverage['sockets/sock.js'][170] = 0;
  _$jscoverage['sockets/sock.js'][171] = 0;
  _$jscoverage['sockets/sock.js'][172] = 0;
  _$jscoverage['sockets/sock.js'][182] = 0;
  _$jscoverage['sockets/sock.js'][183] = 0;
  _$jscoverage['sockets/sock.js'][184] = 0;
  _$jscoverage['sockets/sock.js'][185] = 0;
  _$jscoverage['sockets/sock.js'][186] = 0;
  _$jscoverage['sockets/sock.js'][196] = 0;
  _$jscoverage['sockets/sock.js'][197] = 0;
  _$jscoverage['sockets/sock.js'][198] = 0;
  _$jscoverage['sockets/sock.js'][199] = 0;
  _$jscoverage['sockets/sock.js'][200] = 0;
  _$jscoverage['sockets/sock.js'][210] = 0;
  _$jscoverage['sockets/sock.js'][211] = 0;
  _$jscoverage['sockets/sock.js'][212] = 0;
  _$jscoverage['sockets/sock.js'][213] = 0;
  _$jscoverage['sockets/sock.js'][214] = 0;
  _$jscoverage['sockets/sock.js'][215] = 0;
  _$jscoverage['sockets/sock.js'][231] = 0;
  _$jscoverage['sockets/sock.js'][232] = 0;
  _$jscoverage['sockets/sock.js'][233] = 0;
  _$jscoverage['sockets/sock.js'][234] = 0;
  _$jscoverage['sockets/sock.js'][235] = 0;
  _$jscoverage['sockets/sock.js'][236] = 0;
  _$jscoverage['sockets/sock.js'][237] = 0;
  _$jscoverage['sockets/sock.js'][238] = 0;
  _$jscoverage['sockets/sock.js'][239] = 0;
  _$jscoverage['sockets/sock.js'][256] = 0;
  _$jscoverage['sockets/sock.js'][257] = 0;
  _$jscoverage['sockets/sock.js'][258] = 0;
  _$jscoverage['sockets/sock.js'][259] = 0;
  _$jscoverage['sockets/sock.js'][260] = 0;
  _$jscoverage['sockets/sock.js'][261] = 0;
  _$jscoverage['sockets/sock.js'][263] = 0;
  _$jscoverage['sockets/sock.js'][280] = 0;
  _$jscoverage['sockets/sock.js'][281] = 0;
  _$jscoverage['sockets/sock.js'][282] = 0;
  _$jscoverage['sockets/sock.js'][283] = 0;
  _$jscoverage['sockets/sock.js'][285] = 0;
  _$jscoverage['sockets/sock.js'][286] = 0;
  _$jscoverage['sockets/sock.js'][287] = 0;
  _$jscoverage['sockets/sock.js'][288] = 0;
  _$jscoverage['sockets/sock.js'][291] = 0;
  _$jscoverage['sockets/sock.js'][292] = 0;
  _$jscoverage['sockets/sock.js'][293] = 0;
  _$jscoverage['sockets/sock.js'][294] = 0;
  _$jscoverage['sockets/sock.js'][295] = 0;
  _$jscoverage['sockets/sock.js'][296] = 0;
  _$jscoverage['sockets/sock.js'][298] = 0;
  _$jscoverage['sockets/sock.js'][300] = 0;
  _$jscoverage['sockets/sock.js'][301] = 0;
  _$jscoverage['sockets/sock.js'][302] = 0;
  _$jscoverage['sockets/sock.js'][303] = 0;
  _$jscoverage['sockets/sock.js'][304] = 0;
  _$jscoverage['sockets/sock.js'][305] = 0;
  _$jscoverage['sockets/sock.js'][306] = 0;
  _$jscoverage['sockets/sock.js'][307] = 0;
  _$jscoverage['sockets/sock.js'][308] = 0;
  _$jscoverage['sockets/sock.js'][309] = 0;
  _$jscoverage['sockets/sock.js'][310] = 0;
  _$jscoverage['sockets/sock.js'][314] = 0;
  _$jscoverage['sockets/sock.js'][315] = 0;
  _$jscoverage['sockets/sock.js'][316] = 0;
  _$jscoverage['sockets/sock.js'][317] = 0;
  _$jscoverage['sockets/sock.js'][318] = 0;
  _$jscoverage['sockets/sock.js'][319] = 0;
  _$jscoverage['sockets/sock.js'][320] = 0;
  _$jscoverage['sockets/sock.js'][323] = 0;
  _$jscoverage['sockets/sock.js'][324] = 0;
  _$jscoverage['sockets/sock.js'][325] = 0;
  _$jscoverage['sockets/sock.js'][335] = 0;
  _$jscoverage['sockets/sock.js'][336] = 0;
  _$jscoverage['sockets/sock.js'][337] = 0;
  _$jscoverage['sockets/sock.js'][338] = 0;
  _$jscoverage['sockets/sock.js'][339] = 0;
  _$jscoverage['sockets/sock.js'][340] = 0;
  _$jscoverage['sockets/sock.js'][341] = 0;
  _$jscoverage['sockets/sock.js'][342] = 0;
  _$jscoverage['sockets/sock.js'][343] = 0;
  _$jscoverage['sockets/sock.js'][344] = 0;
  _$jscoverage['sockets/sock.js'][345] = 0;
  _$jscoverage['sockets/sock.js'][366] = 0;
  _$jscoverage['sockets/sock.js'][367] = 0;
  _$jscoverage['sockets/sock.js'][368] = 0;
  _$jscoverage['sockets/sock.js'][369] = 0;
  _$jscoverage['sockets/sock.js'][371] = 0;
  _$jscoverage['sockets/sock.js'][372] = 0;
  _$jscoverage['sockets/sock.js'][373] = 0;
  _$jscoverage['sockets/sock.js'][374] = 0;
  _$jscoverage['sockets/sock.js'][377] = 0;
  _$jscoverage['sockets/sock.js'][378] = 0;
  _$jscoverage['sockets/sock.js'][380] = 0;
  _$jscoverage['sockets/sock.js'][382] = 0;
  _$jscoverage['sockets/sock.js'][383] = 0;
  _$jscoverage['sockets/sock.js'][384] = 0;
  _$jscoverage['sockets/sock.js'][385] = 0;
}
_$jscoverage['sockets/sock.js'][6]++;
var net = require("net"), Parser = require("../parser"), Message = require("../message"), codecs = require("../codecs"), Emitter = require("events").EventEmitter, debug = require("debug")("axon:sock"), Configurable = require("configurable"), url = require("url");
_$jscoverage['sockets/sock.js'][19]++;
var ignore = ["ECONNREFUSED", "ECONNRESET", "ETIMEDOUT", "EHOSTUNREACH", "ENETUNREACH", "ENETDOWN", "EPIPE"];
_$jscoverage['sockets/sock.js'][33]++;
module.exports = Socket;
_$jscoverage['sockets/sock.js'][49]++;
function Socket() {
  _$jscoverage['sockets/sock.js'][50]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][51]++;
  this.opts = {};
  _$jscoverage['sockets/sock.js'][52]++;
  this.server = null;
  _$jscoverage['sockets/sock.js'][53]++;
  this.socks = [];
  _$jscoverage['sockets/sock.js'][54]++;
  this.settings = {};
  _$jscoverage['sockets/sock.js'][55]++;
  this.format("none");
  _$jscoverage['sockets/sock.js'][56]++;
  this.set("hwm", Infinity);
  _$jscoverage['sockets/sock.js'][57]++;
  this.set("identity", String(process.pid));
  _$jscoverage['sockets/sock.js'][58]++;
  this.set("retry timeout", 100);
  _$jscoverage['sockets/sock.js'][59]++;
  this.set("retry max timeout", 5000);
}
_$jscoverage['sockets/sock.js'][66]++;
Socket.prototype.__proto__ = Emitter.prototype;
_$jscoverage['sockets/sock.js'][72]++;
Configurable(Socket.prototype);
_$jscoverage['sockets/sock.js'][81]++;
Socket.prototype.use = (function (plugin) {
  _$jscoverage['sockets/sock.js'][82]++;
  plugin(this);
  _$jscoverage['sockets/sock.js'][83]++;
  return this;
});
_$jscoverage['sockets/sock.js'][94]++;
Socket.prototype.format = (function (type) {
  _$jscoverage['sockets/sock.js'][95]++;
  var codec = codecs.byName(type);
  _$jscoverage['sockets/sock.js'][96]++;
  if (! codec) {
    _$jscoverage['sockets/sock.js'][96]++;
    throw new Error("unknown format \"" + type + "\"");
  }
  _$jscoverage['sockets/sock.js'][97]++;
  this.codec = codec;
  _$jscoverage['sockets/sock.js'][98]++;
  return this;
});
_$jscoverage['sockets/sock.js'][116]++;
Socket.prototype.pack = (function (data) {
  _$jscoverage['sockets/sock.js'][117]++;
  var msg = new Message(), codec = this.codec;
  _$jscoverage['sockets/sock.js'][120]++;
  if (Array.isArray(data)) {
    _$jscoverage['sockets/sock.js'][121]++;
    for (var i = 0; i < data.length; i++) {
      _$jscoverage['sockets/sock.js'][122]++;
      msg.write(codec.encode(data[i]), codec.id);
}
  }
  else {
    _$jscoverage['sockets/sock.js'][125]++;
    msg.write(codec.encode(data), codec.id);
  }
  _$jscoverage['sockets/sock.js'][128]++;
  return msg.toBuffer();
});
_$jscoverage['sockets/sock.js'][137]++;
Socket.prototype.closeSockets = (function () {
  _$jscoverage['sockets/sock.js'][138]++;
  debug("closing %d connections", this.socks.length);
  _$jscoverage['sockets/sock.js'][139]++;
  this.socks.forEach((function (sock) {
  _$jscoverage['sockets/sock.js'][140]++;
  sock.destroy();
}));
});
_$jscoverage['sockets/sock.js'][154]++;
Socket.prototype.close = (function (fn) {
  _$jscoverage['sockets/sock.js'][155]++;
  debug("closing");
  _$jscoverage['sockets/sock.js'][156]++;
  this.closing = true;
  _$jscoverage['sockets/sock.js'][157]++;
  this.closeSockets();
  _$jscoverage['sockets/sock.js'][158]++;
  if (this.server) {
    _$jscoverage['sockets/sock.js'][158]++;
    this.closeServer(fn);
  }
});
_$jscoverage['sockets/sock.js'][168]++;
Socket.prototype.closeServer = (function (fn) {
  _$jscoverage['sockets/sock.js'][169]++;
  debug("closing server");
  _$jscoverage['sockets/sock.js'][170]++;
  this.server.on("close", this.emit.bind(this, "close"));
  _$jscoverage['sockets/sock.js'][171]++;
  this.server.close();
  _$jscoverage['sockets/sock.js'][172]++;
  fn && fn();
});
_$jscoverage['sockets/sock.js'][182]++;
Socket.prototype.address = (function () {
  _$jscoverage['sockets/sock.js'][183]++;
  if (! this.server) {
    _$jscoverage['sockets/sock.js'][183]++;
    return;
  }
  _$jscoverage['sockets/sock.js'][184]++;
  var addr = this.server.address();
  _$jscoverage['sockets/sock.js'][185]++;
  addr.string = "tcp://" + addr.address + ":" + addr.port;
  _$jscoverage['sockets/sock.js'][186]++;
  return addr;
});
_$jscoverage['sockets/sock.js'][196]++;
Socket.prototype.removeSocket = (function (sock) {
  _$jscoverage['sockets/sock.js'][197]++;
  var i = this.socks.indexOf(sock);
  _$jscoverage['sockets/sock.js'][198]++;
  if (! ~ i) {
    _$jscoverage['sockets/sock.js'][198]++;
    return;
  }
  _$jscoverage['sockets/sock.js'][199]++;
  debug("remove socket %d", i);
  _$jscoverage['sockets/sock.js'][200]++;
  this.socks.splice(i, 1);
});
_$jscoverage['sockets/sock.js'][210]++;
Socket.prototype.addSocket = (function (sock) {
  _$jscoverage['sockets/sock.js'][211]++;
  var parser = new Parser();
  _$jscoverage['sockets/sock.js'][212]++;
  var i = this.socks.push(sock) - 1;
  _$jscoverage['sockets/sock.js'][213]++;
  debug("add socket %d", i);
  _$jscoverage['sockets/sock.js'][214]++;
  sock.on("data", parser.write.bind(parser));
  _$jscoverage['sockets/sock.js'][215]++;
  parser.onmessage = this.onmessage(sock);
});
_$jscoverage['sockets/sock.js'][231]++;
Socket.prototype.handleErrors = (function (sock) {
  _$jscoverage['sockets/sock.js'][232]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][233]++;
  sock.on("error", (function (err) {
  _$jscoverage['sockets/sock.js'][234]++;
  debug("error %s", err.code || err.message);
  _$jscoverage['sockets/sock.js'][235]++;
  self.emit("socket error", err);
  _$jscoverage['sockets/sock.js'][236]++;
  self.removeSocket(sock);
  _$jscoverage['sockets/sock.js'][237]++;
  if (! ~ ignore.indexOf(err.code)) {
    _$jscoverage['sockets/sock.js'][237]++;
    return self.emit("error", err);
  }
  _$jscoverage['sockets/sock.js'][238]++;
  debug("ignored %s", err.code);
  _$jscoverage['sockets/sock.js'][239]++;
  self.emit("ignored error", err);
}));
});
_$jscoverage['sockets/sock.js'][256]++;
Socket.prototype.onmessage = (function (sock) {
  _$jscoverage['sockets/sock.js'][257]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][258]++;
  return (function (msg, multipart) {
  _$jscoverage['sockets/sock.js'][259]++;
  if (multipart) {
    _$jscoverage['sockets/sock.js'][260]++;
    msg.unshift("message");
    _$jscoverage['sockets/sock.js'][261]++;
    self.emit.apply(self, msg);
  }
  else {
    _$jscoverage['sockets/sock.js'][263]++;
    self.emit("message", msg);
  }
});
});
_$jscoverage['sockets/sock.js'][280]++;
Socket.prototype.connect = (function (port, host, fn) {
  _$jscoverage['sockets/sock.js'][281]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][282]++;
  if ("server" == this.type) {
    _$jscoverage['sockets/sock.js'][282]++;
    throw new Error("cannot connect() after bind()");
  }
  _$jscoverage['sockets/sock.js'][283]++;
  if ("function" == typeof host) {
    _$jscoverage['sockets/sock.js'][283]++;
    fn = host, host = undefined;
  }
  _$jscoverage['sockets/sock.js'][285]++;
  if ("string" == typeof port) {
    _$jscoverage['sockets/sock.js'][286]++;
    port = url.parse(port);
    _$jscoverage['sockets/sock.js'][287]++;
    host = port.hostname;
    _$jscoverage['sockets/sock.js'][288]++;
    port = parseInt(port.port, 10);
  }
  _$jscoverage['sockets/sock.js'][291]++;
  var max = self.get("retry max timeout");
  _$jscoverage['sockets/sock.js'][292]++;
  var sock = new net.Socket();
  _$jscoverage['sockets/sock.js'][293]++;
  sock.setNoDelay();
  _$jscoverage['sockets/sock.js'][294]++;
  this.type = "client";
  _$jscoverage['sockets/sock.js'][295]++;
  port = port;
  _$jscoverage['sockets/sock.js'][296]++;
  host = host || "127.0.0.1";
  _$jscoverage['sockets/sock.js'][298]++;
  this.handleErrors(sock);
  _$jscoverage['sockets/sock.js'][300]++;
  sock.on("close", (function () {
  _$jscoverage['sockets/sock.js'][301]++;
  self.connected = false;
  _$jscoverage['sockets/sock.js'][302]++;
  self.removeSocket(sock);
  _$jscoverage['sockets/sock.js'][303]++;
  if (self.closing) {
    _$jscoverage['sockets/sock.js'][303]++;
    return self.emit("close");
  }
  _$jscoverage['sockets/sock.js'][304]++;
  var retry = self.retry || self.get("retry timeout");
  _$jscoverage['sockets/sock.js'][305]++;
  setTimeout((function () {
  _$jscoverage['sockets/sock.js'][306]++;
  debug("attempting reconnect");
  _$jscoverage['sockets/sock.js'][307]++;
  self.emit("reconnect attempt");
  _$jscoverage['sockets/sock.js'][308]++;
  sock.destroy();
  _$jscoverage['sockets/sock.js'][309]++;
  self.connect(port, host);
  _$jscoverage['sockets/sock.js'][310]++;
  self.retry = Math.min(max, retry * 1.5);
}), retry);
}));
  _$jscoverage['sockets/sock.js'][314]++;
  sock.on("connect", (function () {
  _$jscoverage['sockets/sock.js'][315]++;
  debug("connect");
  _$jscoverage['sockets/sock.js'][316]++;
  self.connected = true;
  _$jscoverage['sockets/sock.js'][317]++;
  self.addSocket(sock);
  _$jscoverage['sockets/sock.js'][318]++;
  self.retry = self.get("retry timeout");
  _$jscoverage['sockets/sock.js'][319]++;
  self.emit("connect");
  _$jscoverage['sockets/sock.js'][320]++;
  fn && fn();
}));
  _$jscoverage['sockets/sock.js'][323]++;
  debug("connect attempt %s:%s", host, port);
  _$jscoverage['sockets/sock.js'][324]++;
  sock.connect(port, host);
  _$jscoverage['sockets/sock.js'][325]++;
  return this;
});
_$jscoverage['sockets/sock.js'][335]++;
Socket.prototype.onconnect = (function (sock) {
  _$jscoverage['sockets/sock.js'][336]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][337]++;
  var addr = sock.remoteAddress + ":" + sock.remotePort;
  _$jscoverage['sockets/sock.js'][338]++;
  debug("accept %s", addr);
  _$jscoverage['sockets/sock.js'][339]++;
  this.addSocket(sock);
  _$jscoverage['sockets/sock.js'][340]++;
  this.handleErrors(sock);
  _$jscoverage['sockets/sock.js'][341]++;
  this.emit("connect", sock);
  _$jscoverage['sockets/sock.js'][342]++;
  sock.on("close", (function () {
  _$jscoverage['sockets/sock.js'][343]++;
  debug("disconnect %s", addr);
  _$jscoverage['sockets/sock.js'][344]++;
  self.emit("disconnect", sock);
  _$jscoverage['sockets/sock.js'][345]++;
  self.removeSocket(sock);
}));
});
_$jscoverage['sockets/sock.js'][366]++;
Socket.prototype.bind = (function (port, host, fn) {
  _$jscoverage['sockets/sock.js'][367]++;
  var self = this;
  _$jscoverage['sockets/sock.js'][368]++;
  if ("client" == this.type) {
    _$jscoverage['sockets/sock.js'][368]++;
    throw new Error("cannot bind() after connect()");
  }
  _$jscoverage['sockets/sock.js'][369]++;
  if ("function" == typeof host) {
    _$jscoverage['sockets/sock.js'][369]++;
    fn = host, host = undefined;
  }
  _$jscoverage['sockets/sock.js'][371]++;
  if ("string" == typeof port) {
    _$jscoverage['sockets/sock.js'][372]++;
    port = url.parse(port);
    _$jscoverage['sockets/sock.js'][373]++;
    host = port.hostname;
    _$jscoverage['sockets/sock.js'][374]++;
    port = parseInt(port.port, 10);
  }
  _$jscoverage['sockets/sock.js'][377]++;
  this.type = "server";
  _$jscoverage['sockets/sock.js'][378]++;
  host = host || "0.0.0.0";
  _$jscoverage['sockets/sock.js'][380]++;
  this.server = net.createServer(this.onconnect.bind(this));
  _$jscoverage['sockets/sock.js'][382]++;
  debug("bind %s:%s", host, port);
  _$jscoverage['sockets/sock.js'][383]++;
  this.server.on("listening", this.emit.bind(this, "bind"));
  _$jscoverage['sockets/sock.js'][384]++;
  this.server.listen(port, host, fn);
  _$jscoverage['sockets/sock.js'][385]++;
  return this;
});
_$jscoverage['sockets/sock.js'].source = ["","/**"," * Module dependencies."," */","","var net = require('net')","  , Parser = require('../parser')","  , Message = require('../message')","  , codecs = require('../codecs')","  , Emitter = require('events').EventEmitter","  , debug = require('debug')('axon:sock')","  , Configurable = require('configurable')","  , url = require('url');","","/**"," * Errors to ignore."," */","","var ignore = [","  'ECONNREFUSED',","  'ECONNRESET',","  'ETIMEDOUT',","  'EHOSTUNREACH',","  'ENETUNREACH',","  'ENETDOWN',","  'EPIPE'","];","","/**"," * Expose `Socket`."," */","","module.exports = Socket;","","/**"," * Initialize a new `Socket`."," *"," * A \"Socket\" encapsulates the ability of being"," * the \"client\" or the \"server\" depending on"," * whether `connect()` or `bind()` was called."," *"," * Upon sending and recieving messages, the correct codec"," * set by `format` will be applied. Both sides must elect"," * the same codec, or all hell will break loose on the app."," *"," * @api private"," */","","function Socket() {","  var self = this;","  this.opts = {};","  this.server = null;","  this.socks = [];","  this.settings = {};","  this.format('none');","  this.set('hwm', Infinity);","  this.set('identity', String(process.pid));","  this.set('retry timeout', 100);","  this.set('retry max timeout', 5000);","}","","/**"," * Inherit from `Emitter.prototype`."," */","","Socket.prototype.__proto__ = Emitter.prototype;","","/**"," * Make it configurable `.set()` etc."," */","","Configurable(Socket.prototype);","","/**"," * Use the given `plugin`."," *"," * @param {Function} plugin"," * @api private"," */","","Socket.prototype.use = function(plugin){","  plugin(this);","  return this;","};","","/**"," * Set format to `type`."," *"," * @param {String} type"," * @return {Socket}"," * @api public"," */","","Socket.prototype.format = function(type){","  var codec = codecs.byName(type);","  if (!codec) throw new Error('unknown format \"' + type + '\"');","  this.codec = codec;","  return this;","};","","","/**"," * Creates a new `Message` and writes `data` using the"," * `codec` set already by `format`."," *"," * This will only work for single part messages or multi"," * part message that all use the same codec. If you need"," * otherwise, use the `Message` constructor to craft"," * your own message."," *"," * @param {Mixed} data"," * @return {Buffer}"," * @api private"," */","","Socket.prototype.pack = function(data){","  var msg = new Message","    , codec = this.codec;","","  if (Array.isArray(data)) {","    for (var i = 0; i &lt; data.length; i++) {","      msg.write(codec.encode(data[i]), codec.id);","    }","  } else {","    msg.write(codec.encode(data), codec.id);","  }","","  return msg.toBuffer();","};","","/**"," * Close all open underlying sockets."," *"," * @api private"," */","","Socket.prototype.closeSockets = function(){","  debug('closing %d connections', this.socks.length);","  this.socks.forEach(function(sock){","    sock.destroy();","  });","};","","/**"," * Close the socket."," *"," * Delegates to the server or clients"," * based on the socket `type`."," *"," * @param {Function} [fn]"," * @api public"," */","","Socket.prototype.close = function(fn){","  debug('closing');","  this.closing = true;","  this.closeSockets();","  if (this.server) this.closeServer(fn);","};","","/**"," * Close the server."," *"," * @param {Function} [fn]"," * @api public"," */","","Socket.prototype.closeServer = function(fn){","  debug('closing server');","  this.server.on('close', this.emit.bind(this, 'close'));","  this.server.close();","  fn &amp;&amp; fn();","};","","/**"," * Return the server address."," *"," * @return {Object}"," * @api public"," */","","Socket.prototype.address = function(){","  if (!this.server) return;","  var addr = this.server.address();","  addr.string = 'tcp://' + addr.address + ':' + addr.port;","  return addr;","};","","/**"," * Remove `sock`."," *"," * @param {Socket} sock"," * @api private"," */","","Socket.prototype.removeSocket = function(sock){","  var i = this.socks.indexOf(sock);","  if (!~i) return;","  debug('remove socket %d', i);","  this.socks.splice(i, 1);","};","","/**"," * Add `sock`."," *"," * @param {Socket} sock"," * @api private"," */","","Socket.prototype.addSocket = function(sock){","  var parser = new Parser;","  var i = this.socks.push(sock) - 1;","  debug('add socket %d', i);","  sock.on('data', parser.write.bind(parser));","  parser.onmessage = this.onmessage(sock);","};","","/**"," * Handle `sock` errors."," *"," * Emits:"," *"," *  - `error` (err) when the error is not ignored"," *  - `ignored error` (err) when the error is ignored"," *  - `socket error` (err) regardless of ignoring"," *"," * @param {Socket} sock"," * @api private"," */","","Socket.prototype.handleErrors = function(sock){","  var self = this;","  sock.on('error', function(err){","    debug('error %s', err.code || err.message);","    self.emit('socket error', err);","    self.removeSocket(sock);","    if (!~ignore.indexOf(err.code)) return self.emit('error', err);","    debug('ignored %s', err.code);","    self.emit('ignored error', err);","  });","};","","/**"," * Handles framed messages emitted from the parser, by"," * default it will go ahead and emit the \"message\" events on"," * the socket. However, if the \"higher level\" socket needs"," * to hook into the messages before they are emitted, it"," * should override this method and take care of everything"," * it self, including emitted the \"message\" event."," *"," * @param {net.Socket} sock"," * @return {Function} closure(msg, mulitpart)"," * @api private"," */","","Socket.prototype.onmessage = function(sock){","  var self = this;","  return function(msg, multipart){","    if (multipart) {","      msg.unshift('message');","      self.emit.apply(self, msg);","    } else {","      self.emit('message', msg);","    }","  };","};","","/**"," * Connect to `port` at `host` and invoke `fn()`."," *"," * Defaults `host` to localhost."," *"," * @param {Number|String} port"," * @param {String} host"," * @param {Function} fn"," * @return {Socket}"," * @api public"," */","","Socket.prototype.connect = function(port, host, fn){","  var self = this;","  if ('server' == this.type) throw new Error('cannot connect() after bind()');","  if ('function' == typeof host) fn = host, host = undefined;","","  if ('string' == typeof port) {","    port = url.parse(port);","    host = port.hostname;","    port = parseInt(port.port, 10);","  }","","  var max = self.get('retry max timeout');","  var sock = new net.Socket;","  sock.setNoDelay();","  this.type = 'client';","  port = port;","  host = host || '127.0.0.1';","","  this.handleErrors(sock);","","  sock.on('close', function(){","    self.connected = false;","    self.removeSocket(sock);","    if (self.closing) return self.emit('close');","    var retry = self.retry || self.get('retry timeout');","    setTimeout(function(){","      debug('attempting reconnect');","      self.emit('reconnect attempt');","      sock.destroy();","      self.connect(port, host);","      self.retry = Math.min(max, retry * 1.5);","    }, retry);","  });","","  sock.on('connect', function(){","    debug('connect');","    self.connected = true;","    self.addSocket(sock);","    self.retry = self.get('retry timeout');","    self.emit('connect');","    fn &amp;&amp; fn();","  });","","  debug('connect attempt %s:%s', host, port);","  sock.connect(port, host);","  return this;","};","","/**"," * Handle connection."," *"," * @param {Socket} sock"," * @api private"," */","","Socket.prototype.onconnect = function(sock){","  var self = this;","  var addr = sock.remoteAddress + ':' + sock.remotePort;","  debug('accept %s', addr);","  this.addSocket(sock);","  this.handleErrors(sock);","  this.emit('connect', sock);","  sock.on('close', function(){","    debug('disconnect %s', addr);","    self.emit('disconnect', sock);","    self.removeSocket(sock);","  });","};","","/**"," * Bind to `port` at `host` and invoke `fn()`."," *"," * Defaults `host` to INADDR_ANY."," *"," * Emits:"," *"," *  - `connection` when a client connects"," *  - `disconnect` when a client disconnects"," *  - `bind` when bound and listening"," *"," * @param {Number|String} port"," * @param {Function} fn"," * @return {Socket}"," * @api public"," */","","Socket.prototype.bind = function(port, host, fn){","  var self = this;","  if ('client' == this.type) throw new Error('cannot bind() after connect()');","  if ('function' == typeof host) fn = host, host = undefined;","","  if ('string' == typeof port) {","    port = url.parse(port);","    host = port.hostname;","    port = parseInt(port.port, 10);","  }","","  this.type = 'server';","  host = host || '0.0.0.0';","","  this.server = net.createServer(this.onconnect.bind(this));","","  debug('bind %s:%s', host, port);","  this.server.on('listening', this.emit.bind(this, 'bind'));","  this.server.listen(port, host, fn);","  return this;","};"];
