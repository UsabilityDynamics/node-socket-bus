/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['websocket-mq.js']) {
  _$jscoverage['websocket-mq.js'] = [];
  _$jscoverage['websocket-mq.js'][11] = 0;
  _$jscoverage['websocket-mq.js'][14] = 0;
  _$jscoverage['websocket-mq.js'][15] = 0;
  _$jscoverage['websocket-mq.js'][18] = 0;
  _$jscoverage['websocket-mq.js'][21] = 0;
  _$jscoverage['websocket-mq.js'][22] = 0;
  _$jscoverage['websocket-mq.js'][23] = 0;
  _$jscoverage['websocket-mq.js'][26] = 0;
  _$jscoverage['websocket-mq.js'][34] = 0;
  _$jscoverage['websocket-mq.js'][41] = 0;
  _$jscoverage['websocket-mq.js'][43] = 0;
  _$jscoverage['websocket-mq.js'][46] = 0;
  _$jscoverage['websocket-mq.js'][47] = 0;
  _$jscoverage['websocket-mq.js'][50] = 0;
  _$jscoverage['websocket-mq.js'][51] = 0;
  _$jscoverage['websocket-mq.js'][58] = 0;
  _$jscoverage['websocket-mq.js'][61] = 0;
  _$jscoverage['websocket-mq.js'][69] = 0;
  _$jscoverage['websocket-mq.js'][72] = 0;
  _$jscoverage['websocket-mq.js'][75] = 0;
  _$jscoverage['websocket-mq.js'][76] = 0;
  _$jscoverage['websocket-mq.js'][80] = 0;
  _$jscoverage['websocket-mq.js'][95] = 0;
  _$jscoverage['websocket-mq.js'][98] = 0;
  _$jscoverage['websocket-mq.js'][103] = 0;
  _$jscoverage['websocket-mq.js'][104] = 0;
  _$jscoverage['websocket-mq.js'][110] = 0;
  _$jscoverage['websocket-mq.js'][113] = 0;
  _$jscoverage['websocket-mq.js'][121] = 0;
  _$jscoverage['websocket-mq.js'][134] = 0;
  _$jscoverage['websocket-mq.js'][135] = 0;
  _$jscoverage['websocket-mq.js'][137] = 0;
  _$jscoverage['websocket-mq.js'][139] = 0;
  _$jscoverage['websocket-mq.js'][140] = 0;
  _$jscoverage['websocket-mq.js'][143] = 0;
  _$jscoverage['websocket-mq.js'][144] = 0;
  _$jscoverage['websocket-mq.js'][147] = 0;
  _$jscoverage['websocket-mq.js'][184] = 0;
  _$jscoverage['websocket-mq.js'][211] = 0;
  _$jscoverage['websocket-mq.js'][219] = 0;
  _$jscoverage['websocket-mq.js'][228] = 0;
  _$jscoverage['websocket-mq.js'][229] = 0;
  _$jscoverage['websocket-mq.js'][232] = 0;
  _$jscoverage['websocket-mq.js'][233] = 0;
  _$jscoverage['websocket-mq.js'][234] = 0;
  _$jscoverage['websocket-mq.js'][235] = 0;
  _$jscoverage['websocket-mq.js'][236] = 0;
  _$jscoverage['websocket-mq.js'][239] = 0;
  _$jscoverage['websocket-mq.js'][240] = 0;
  _$jscoverage['websocket-mq.js'][241] = 0;
  _$jscoverage['websocket-mq.js'][243] = 0;
  _$jscoverage['websocket-mq.js'][255] = 0;
  _$jscoverage['websocket-mq.js'][262] = 0;
  _$jscoverage['websocket-mq.js'][267] = 0;
  _$jscoverage['websocket-mq.js'][269] = 0;
  _$jscoverage['websocket-mq.js'][272] = 0;
  _$jscoverage['websocket-mq.js'][273] = 0;
  _$jscoverage['websocket-mq.js'][283] = 0;
  _$jscoverage['websocket-mq.js'][285] = 0;
  _$jscoverage['websocket-mq.js'][289] = 0;
  _$jscoverage['websocket-mq.js'][290] = 0;
  _$jscoverage['websocket-mq.js'][299] = 0;
  _$jscoverage['websocket-mq.js'][302] = 0;
  _$jscoverage['websocket-mq.js'][311] = 0;
}
_$jscoverage['websocket-mq.js'][11]++;
function WebSocket(settings, cb) {
  _$jscoverage['websocket-mq.js'][14]++;
  if (! (this instanceof WebSocket)) {
    _$jscoverage['websocket-mq.js'][15]++;
    return new WebSocket(options, cb);
  }
  _$jscoverage['websocket-mq.js'][18]++;
  var Instance = this;
  _$jscoverage['websocket-mq.js'][21]++;
  require("object-settings").mixin(Instance);
  _$jscoverage['websocket-mq.js'][22]++;
  require("object-emitter").mixin(Instance);
  _$jscoverage['websocket-mq.js'][23]++;
  require("object-emitter").inject(WebSocket.Server.prototype);
  _$jscoverage['websocket-mq.js'][26]++;
  Instance.set({settings: settings, identity: String(process.pid), retry: 100, max_retry: 5000});
  _$jscoverage['websocket-mq.js'][34]++;
  Instance.Server = new WebSocket.Server({host: Instance.get("settings.host", "localhost"), port: Instance.get("settings.port", 80123), path: Instance.get("settings.port", "/")});
  _$jscoverage['websocket-mq.js'][41]++;
  Instance.Server.on("error", (function error(error) {
  _$jscoverage['websocket-mq.js'][43]++;
  switch (error.code) {
  case "EACCES":
    _$jscoverage['websocket-mq.js'][46]++;
    Instance.Server.emit("error.unable_to_bind", new Error("WebSocket can not bind."));
    _$jscoverage['websocket-mq.js'][47]++;
    break;
  case "EADDRINUSE":
    _$jscoverage['websocket-mq.js'][50]++;
    Instance.Server.emit("error.address_in_use", new Error("WebSocket port already used."));
    _$jscoverage['websocket-mq.js'][51]++;
    break;
  }
}));
  _$jscoverage['websocket-mq.js'][58]++;
  Instance.Server.on("connection", (function connection(socket) {
  _$jscoverage['websocket-mq.js'][61]++;
  socket.session = {key: socket.upgradeReq.headers["sec-websocket-key"], sid: Math.random().toString(36).substring(2), headers: socket.upgradeReq.headers, method: socket.upgradeReq.method, path: socket.upgradeReq.url};
  _$jscoverage['websocket-mq.js'][69]++;
  socket.send("{\"event\":\"handshake\",\"sid\":\"" + socket.session.sid + "\"}");
  _$jscoverage['websocket-mq.js'][72]++;
  socket.on("message", (function incoming(message) {
  _$jscoverage['websocket-mq.js'][75]++;
  if (message instanceof Buffer) {
    _$jscoverage['websocket-mq.js'][76]++;
    message = msgpack.unpack(options.buffer);
  }
  _$jscoverage['websocket-mq.js'][80]++;
  WebSocket.utility.extend(message, {id: socket.session.id, session: socket.session, event: "string" === typeof message? message: message.event, data: message});
}));
}));
  _$jscoverage['websocket-mq.js'][95]++;
  Instance.Server.on("listening", (function listening() {
  _$jscoverage['websocket-mq.js'][98]++;
  Instance.set("settings", {host: this._server.address().address, port: this._server.address().port});
  _$jscoverage['websocket-mq.js'][103]++;
  if ("function" === typeof cb) {
    _$jscoverage['websocket-mq.js'][104]++;
    cb(null, this);
  }
}));
  _$jscoverage['websocket-mq.js'][110]++;
  WebSocket.utility.extend(Instance._events, Instance.Server._events);
  _$jscoverage['websocket-mq.js'][113]++;
  return Instance;
}
_$jscoverage['websocket-mq.js'][121]++;
Object.defineProperties(WebSocket.prototype, {configure: {value: (function configure(env, fn) {
  _$jscoverage['websocket-mq.js'][134]++;
  var envs = "all";
  _$jscoverage['websocket-mq.js'][135]++;
  var args = [].slice.call(arguments);
  _$jscoverage['websocket-mq.js'][137]++;
  fn = args.pop();
  _$jscoverage['websocket-mq.js'][139]++;
  if (args.length) {
    _$jscoverage['websocket-mq.js'][140]++;
    envs = args;
  }
  _$jscoverage['websocket-mq.js'][143]++;
  if ("all" == envs || ~ envs.indexOf(this.get("environment"))) {
    _$jscoverage['websocket-mq.js'][144]++;
    this.on("connection.success", fn.bind(this, this));
  }
  _$jscoverage['websocket-mq.js'][147]++;
  return this;
}), enumerable: true, writable: true, configurable: true}, getQueue: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, createBroker: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, subscribe: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}, send: {value: (function getQueue() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['websocket-mq.js'][184]++;
Object.defineProperties(module.exports = WebSocket, {Server: {value: require("ws").Server, enumerable: false, writable: true, configurable: true}, amqp: {value: require("amqp"), enumerable: false, writable: true, configurable: true}, debug: {value: require("debug")("websocket-mq"), enumerable: false, configurable: true, writable: true}, utility: {value: require("./utility"), enumerable: false, configurable: true, writable: true}, createServer: {value: (function createServer(options, cb) {
  _$jscoverage['websocket-mq.js'][211]++;
  return new WebSocket(options, cb);
}), enumerable: true, configurable: true, writable: true}, createProxy: {value: (function createProxy(options, cb) {
  _$jscoverage['websocket-mq.js'][219]++;
  return new WebSocket(options, cb);
}), enumerable: true, configurable: true, writable: true}, createConnection: {value: (function createConnection(options, cb) {
  _$jscoverage['websocket-mq.js'][228]++;
  if (! (this instanceof createConnection)) {
    _$jscoverage['websocket-mq.js'][229]++;
    return new createConnection(options, cb);
  }
  _$jscoverage['websocket-mq.js'][232]++;
  var Instance = this;
  _$jscoverage['websocket-mq.js'][233]++;
  var validation = require("object-validation");
  _$jscoverage['websocket-mq.js'][234]++;
  var msgpack = require("msgpack");
  _$jscoverage['websocket-mq.js'][235]++;
  var ws = require("ws");
  _$jscoverage['websocket-mq.js'][236]++;
  var extend = require("extend");
  _$jscoverage['websocket-mq.js'][239]++;
  require("object-settings").mixin(this);
  _$jscoverage['websocket-mq.js'][240]++;
  require("object-emitter").mixin(this);
  _$jscoverage['websocket-mq.js'][241]++;
  require("object-emitter").inject(ws.prototype);
  _$jscoverage['websocket-mq.js'][243]++;
  options = WebSocket.utility.extend({host: "localhost", port: 92000, origin: options.origin, passphrase: null, pfx: null, key: null, cert: null, ca: null}, options);
  _$jscoverage['websocket-mq.js'][255]++;
  Instance.Client = new ws.createConnection("http://" + options.host + ":" + options.port, {origin: options.origin || options.host, passphrase: options.passphrase, pfx: options.pfx, key: options.key});
  _$jscoverage['websocket-mq.js'][262]++;
  Instance.Client.on("open", (function open() {
}));
  _$jscoverage['websocket-mq.js'][267]++;
  Instance.Client.on("error", (function error(error) {
  _$jscoverage['websocket-mq.js'][269]++;
  switch (error.code) {
  case "ECONNREFUSED":
    _$jscoverage['websocket-mq.js'][272]++;
    Instance.emit("error.connection_refused", new Error("ServiceBus client could not connect to server."), this);
    _$jscoverage['websocket-mq.js'][273]++;
    break;
  }
}));
  _$jscoverage['websocket-mq.js'][283]++;
  Instance.Client.on("message", (function message(message, options, buffer) {
  _$jscoverage['websocket-mq.js'][285]++;
  if (message instanceof Buffer) {
  }
  _$jscoverage['websocket-mq.js'][289]++;
  if ("string" === typeof message) {
    _$jscoverage['websocket-mq.js'][290]++;
    message = {event: message};
  }
}));
  _$jscoverage['websocket-mq.js'][299]++;
  WebSocket.utility.extend(Instance._events, Instance.Client._events);
  _$jscoverage['websocket-mq.js'][302]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, createClient: {value: (function () {
  _$jscoverage['websocket-mq.js'][311]++;
  return WebSocket.createConnection;
}), enumerable: false, configurable: true}});
_$jscoverage['websocket-mq.js'].source = ["/**"," *"," * ### Events"," * - connection"," * - connection.success"," * - connection.error"," *"," *"," * @type {*}"," */","function WebSocket( settings, cb ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( !( this instanceof WebSocket ) ) {","    return new WebSocket( options, cb );","  }","","  var Instance     = this;","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( Instance );","  require( 'object-emitter' ).mixin( Instance );","  require( 'object-emitter' ).inject( WebSocket.Server.prototype );","","  // Configure instance.","  Instance.set({","    settings: settings,","    identity: String( process.pid ),","    retry: 100,","    max_retry: 5000","  });","","  // Start WebSocket Server.","  Instance.Server = new WebSocket.Server({","    host: Instance.get( 'settings.host', 'localhost' ),","    port: Instance.get( 'settings.port', 80123 ),","    path: Instance.get( 'settings.port', '/' )","  });","","  // Handle Server Errors.","  Instance.Server.on( 'error', function error( error ) {","","    switch( error.code ) {","","      case 'EACCES': {","        Instance.Server.emit( 'error.unable_to_bind', new Error( 'WebSocket can not bind.' ) );","      } break;","","      case 'EADDRINUSE': {","        Instance.Server.emit( 'error.address_in_use', new Error( 'WebSocket port already used.' ) );","      } break;","","    }","","  });","","  // Handle new Connections","  Instance.Server.on( 'connection', function connection( socket ) {","","    // Set Unique SessionID","    socket.session = {","      key: socket.upgradeReq.headers[ 'sec-websocket-key' ],","      sid: Math.random().toString( 36 ).substring( 2 ),","      headers: socket.upgradeReq.headers,","      method: socket.upgradeReq.method,","      path: socket.upgradeReq.url","    }","","    socket.send( '{\"event\":\"handshake\",\"sid\":\"' + socket.session.sid + '\"}' );","","    // Handle Incoming Messages.","    socket.on( 'message', function incoming( message ) {","","      // Parse to JSON","      if( message instanceof Buffer ) {","        message = msgpack.unpack( options.buffer )","      }","","      // Add properties.","      WebSocket.utility.extend( message, {","        id: socket.session.id,","        session: socket.session,","        event: 'string' === typeof message ? message : message.event,","        data: message","      });","","      // Expose.","      // Instance.emit( 'server.message', null, message );","","    });","","  });","","  // Server Bound.","  Instance.Server.on( 'listening', function listening() {","","    // Update / Verify Settings.","    Instance.set( 'settings', {","      host: this._server.address().address,","      port: this._server.address().port","    });","","    if( 'function' === typeof cb ) {","      cb( null, this );","    }","","  });","","  // Merge Server events into instance.","  WebSocket.utility.extend( Instance._events, Instance.Server._events );","","  // Return server instance.","  return Instance;","","}","","/**"," * WebSocket MQ Server Properties."," *"," */","Object.defineProperties( WebSocket.prototype, {","  configure: {","    /**","     * Configure Client","     *","     * Method executed when connection is ready.","     * Usage and semantics emulating Express.","     *","     * @param env","     * @param fn","     * @returns {*}","     */","    value: function configure( env, fn ) {","      var envs      = 'all';","      var args      = [].slice.call(arguments);","","      fn = args.pop();","","      if( args.length ) {","        envs = args;","      }","","      if( 'all' == envs || ~envs.indexOf( this.get( 'environment' ) ) ) {","        this.on( 'connection.success', fn.bind( this, this ) );","      }","","      return this;","","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  getQueue: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  createBroker: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  subscribe: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  },","  send: {","    value: function getQueue() {},","    enumerable: true,","    configurable: true,","    writable: true","  }","})","","/**"," * WebSocket MQ Constructor Properties."," *"," */","Object.defineProperties( module.exports = WebSocket, {","  Server: {","    value: require( 'ws' ).Server,","    enumerable: false,","    writable: true,","    configurable: true","  },","  amqp: {","    value: require( 'amqp' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  debug: {","    value: require( 'debug' )( 'websocket-mq' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  createServer: {","    value: function createServer( options, cb ) {","      return new WebSocket( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createProxy: {","    value: function createProxy( options, cb ) {","      return new WebSocket( options, cb );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    value: function createConnection( options, cb ) {","","      if (!(this instanceof createConnection)) {","        return new createConnection( options, cb );","      }","","      var Instance     = this;","      var validation   = require( 'object-validation' );","      var msgpack      = require( 'msgpack' );","      var ws           = require( 'ws' );","      var extend       = require( 'extend' );","","      // Mixin Settings and EventEmitter","      require( 'object-settings' ).mixin( this );","      require( 'object-emitter' ).mixin( this );","      require( 'object-emitter' ).inject( ws.prototype );","","      options = WebSocket.utility.extend({","        host: 'localhost',","        port: 92000,","        origin: options.origin,","        passphrase: null,","        pfx: null,","        key: null,","        cert: null,","        ca: null,","      }, options )","","      // Create Client Instance.","      Instance.Client = new ws.createConnection( 'http://' + options.host + ':' + options.port, {","        origin: options.origin || options.host,","        passphrase: options.passphrase,","        pfx: options.pfx,","        key: options.key","      });","","      Instance.Client.on( 'open', function open() {","        // Instance.emit( 'open', null );","      });","","      // Handle Client Errors.","      Instance.Client.on( 'error', function error( error ) {","","        switch( error.code ) {","","          case 'ECONNREFUSED': {","            Instance.emit( 'error.connection_refused', new Error( 'ServiceBus client could not connect to server.' ), this );","          } break;","","        }","","        // Expose general error.","        // Instance.emit( 'error', error, this );","","      });","","      // Message from DSB","      Instance.Client.on( 'message', function message( message, options, buffer ) {","","        if( message instanceof Buffer ) {","          // message = msgpack.unpack( options.buffer )","        }","","        if( 'string' === typeof message ) {","          message = { event: message }","        }","","        // Emit to Root EventEmitter","        // Instance.emit( 'message', null, message );","","      });","","      // Merge Server events into instance.","      WebSocket.utility.extend( Instance._events, Instance.Client._events );","","      // Return client instance.","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createClient: {","    value: function() {","      return WebSocket.createConnection;","    },","    enumerable: false,","    configurable: true","  }","})",""];
